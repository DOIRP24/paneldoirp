import { supabase } from './supabase';

interface UserCreationResult {
  success: boolean;
  message: string;
  email?: string;
  password?: string;
  configurationRequired?: boolean;
  user?: any;
}

interface UserDeletionResult {
  success: boolean;
  message: string;
}

interface PasswordResetResult {
  success: boolean;
  message: string;
  password?: string;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 * 
 * –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –≤ auth.users, –∑–∞—Ç–µ–º –≤ public.users
 * –ù–ï –∞–≤—Ç–æ—Ä–∏–∑—É–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export async function createRegularUser(
  email: string,
  fullName: string,
  role: string = 'employee',
  customPassword: string = '123456',
  additionalData: {
    sap_number?: string;
    phone?: string;
    territory_id?: string | null;
    branch_id?: string | null;
    position_id?: string | null;
    work_experience_days?: number;
  } = {}
): Promise<UserCreationResult> {
  try {
    console.log(`üìù –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Edge Function: ${email}, —Ä–æ–ª—å: ${role}`);
    
    // Ensure sap_number is null if it's empty string to avoid unique constraint issues
    const sanitizedSapNumber = additionalData.sap_number && additionalData.sap_number.trim() !== '' 
      ? additionalData.sap_number 
      : null;
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Edge Function –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ–±–µ–∏—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
    
    const response = await fetch(`${import.meta.env.VITE_SUPABASE_URL}/functions/v1/create-user-and-auth`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${(await supabase.auth.getSession()).data.session?.access_token || ''}`
      },
      body: JSON.stringify({
        email,
        password: customPassword,
        full_name: fullName.trim(),
        role,
        sap_number: sanitizedSapNumber,
        phone: additionalData.phone,
        territory_id: additionalData.territory_id,
        branch_id: additionalData.branch_id,
        position_id: additionalData.position_id,
        work_experience_days: additionalData.work_experience_days || 0
      })
    });
    
    if (!response.ok) {
      const errorData = await response.json();
      console.error("‚ùå Edge Function –æ—à–∏–±–∫–∞:", errorData);
      throw new Error(errorData.error || `–û—à–∏–±–∫–∞ HTTP ${response.status}`);
    }
    
    const result = await response.json();
    
    console.log("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", result);
    
    if (result.success) {
      return {
        success: true,
        message: result.message || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω',
        email,
        password: result.tempPassword || customPassword,
        user: result.user
      };
    } else {
      return {
        success: false,
        message: result.message || result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        configurationRequired: result.configurationRequired
      };
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
    if (error instanceof Error) {
      // –û—à–∏–±–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (error.message.includes('already registered') || error.message.includes('already exists')) {
        return {
          success: true,
          message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç',
          email,
          password: customPassword
        };
      }
      
      // –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email
      if (error.message.includes('Email confirm') || error.message.includes('email_confirmation')) {
        return {
          success: false,
          message: '–¢—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–∫–ª—é—á–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Supabase',
          configurationRequired: true
        };
      }
    }
    
    // –û–±—â–∞—è –æ—à–∏–±–∫–∞
    return {
      success: false,
      message: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
    };
  }
}

/**
 * –£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ auth –∏ public —Ç–∞–±–ª–∏—Ü
 */
export async function deleteUser(userId: string): Promise<UserDeletionResult> {
  try {
    console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Edge Function –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try {
      const response = await fetch(`${import.meta.env.VITE_SUPABASE_URL}/functions/v1/delete-user`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${(await supabase.auth.getSession()).data.session?.access_token || ''}`
        },
        body: JSON.stringify({ userId })
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        console.warn('‚ùå Edge Function –æ—à–∏–±–∫–∞:', errorData);
        throw new Error(errorData.error || `–û—à–∏–±–∫–∞ HTTP ${response.status}`);
      }
      
      const result = await response.json();
      
      if (result.success) {
        return {
          success: true,
          message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω'
        };
      } else {
        throw new Error(result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      }
    } catch (edgeFunctionError) {
      console.warn('Edge Function –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º RPC —Ñ—É–Ω–∫—Ü–∏—é:', edgeFunctionError);
      
      // –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å RPC —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
      const { data, error } = await supabase.rpc('rpc_delete_user_complete', {
        p_user_id: userId
      });
      
      if (error) {
        console.warn('RPC —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ:', error);
        
        // –†–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥ - –ø—Ä—è–º–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const { error: dbError } = await supabase
          .from('users')
          .delete()
          .eq('id', userId);
        
        if (dbError) {
          throw new Error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${dbError.message}`);
        }
        
        return {
          success: true,
          message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö'
        };
      }
      
      if (data && data.success) {
        return {
          success: true,
          message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω'
        };
      } else {
        throw new Error(data?.message || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      }
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    return {
      success: false,
      message: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
    };
  }
}

/**
 * –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export async function resetUserPassword(userId: string, email: string): Promise<PasswordResetResult> {
  try {
    console.log('üîë –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId, email);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Edge Function –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
    try {
      const response = await fetch(`${import.meta.env.VITE_SUPABASE_URL}/functions/v1/password-management`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${(await supabase.auth.getSession()).data.session?.access_token || ''}`
        },
        body: JSON.stringify({
          action: 'reset_password',
          userId,
          email
        })
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        console.warn('‚ùå Edge Function –æ—à–∏–±–∫–∞:', errorData);
        throw new Error(errorData.error || `–û—à–∏–±–∫–∞ HTTP ${response.status}`);
      }
      
      const result = await response.json();
      
      if (result.success) {
        return {
          success: true,
          message: '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω',
          password: result.password || '123456'
        };
      } else {
        throw new Error(result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø–∞—Ä–æ–ª—è');
      }
    } catch (edgeFunctionError) {
      console.warn('Edge Function –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º RPC —Ñ—É–Ω–∫—Ü–∏—é:', edgeFunctionError);
      
      // –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å RPC —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
      try {
        const { data, error } = await supabase.rpc('rpc_repair_user_auth', {
          p_user_id: userId
        });
        
        if (!error && data?.status === 'success') {
          console.log('‚úÖ –ü–∞—Ä–æ–ª—å —Å–±—Ä–æ—à–µ–Ω —á–µ—Ä–µ–∑ RPC —Ñ—É–Ω–∫—Ü–∏—é');
          return {
            success: true,
            message: '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω',
            password: data.password || '123456'
          };
        } else {
          throw error || new Error(data?.message || '–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è');
        }
      } catch (rpcError) {
        console.warn('‚ùå RPC —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞:', rpcError);
        
        // –†–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞—Ä–æ–ª—å
        console.log('–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞—Ä–æ–ª—å: 123456');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        try {
          await supabase
            .from('users')
            .update({ password_changed_at: new Date().toISOString() })
            .eq('id', userId);
        } catch (updateError) {
          console.warn('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è:', updateError);
        }
        
        return {
          success: true,
          message: '–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞—Ä–æ–ª—å: 123456',
          password: '123456'
        };
      }
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è:', error);
    return {
      success: false,
      message: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è'
    };
  }
}