import React, { createContext, useContext, useEffect, useRef, useState } from 'react';
import { supabase } from '../lib/supabase';
import { getUserFromCache, cacheUserProfile, clearUserCache } from '../lib/userCache';
import { Session } from '@supabase/supabase-js';

// –†–∞—Å—à–∏—Ä—è–µ–º window –¥–ª—è —Ñ–ª–∞–≥–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
declare global {
  interface Window {
    authCallbackProcessing?: boolean;
  }
}

interface User {
  id: string;
  email?: string;
  sap_number?: string;
  full_name: string;
  position?: string;
  phone?: string;
  avatar_url?: string;
  role: 'employee' | 'supervisor' | 'trainer' | 'expert' | 'moderator' | 'administrator';
  subdivision: 'management_company' | 'branches';
  branch_subrole?: 'sales_representative' | 'supervisor' | 'branch_director';
  branch_id?: string;
  status: 'active' | 'inactive' | 'terminating' | 'transferring';
  work_experience_days: number;
  last_sign_in_at?: string;
  created_at: string;
  updated_at: string;
  territory_id?: string;
  position_id?: string;
  is_active: boolean;
  department?: string;
  is_leaving?: boolean;
}

type LoadingPhase = 
  | 'initializing' 
  | 'session-fetch' 
  | 'profile-fetch' 
  | 'auth-change' 
  | 'profile-processing' 
  | 'complete' 
  | 'error' 
  | 'reset'
  | 'ready'
  | 'logged-out';

interface AuthContextType {
  user: User | null;
  userProfile: User | null;
  session: Session | null;
  loading: boolean;
  authError: string | null;
  loadingPhase: LoadingPhase;
  signIn: (identifier: string, password: string) => Promise<{ data: any; error: any }>;
  signOut: () => Promise<any>;
  resetAuth: () => void;
  refreshProfile: () => Promise<void>;
  retryFetchProfile: () => Promise<void>;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export function AuthProvider({ children }: { children: React.ReactNode }) {
  const [user, setUser] = useState<User | null>(null);
  const [userProfile, setUserProfile] = useState<User | null>(null); 
  const [session, setSession] = useState<Session | null>(null);
  const [loading, setLoading] = useState(true); 
  const [authError, setAuthError] = useState<string | null>(null);
  const [loadingPhase, setLoadingPhase] = useState<LoadingPhase>('initializing');
  const [retryCount, setRetryCount] = useState(0);

  // single-flight
  const inFlightProfile = useRef<Promise<User | null> | null>(null);

  // –±–µ–∑–æ–ø–∞—Å–Ω—ã–π sleep
  const delay = (ms: number) => new Promise(res => setTimeout(res, ms));

  // Utility function to create fallback user
  const createFallbackUser = (
    userId: string, 
    email?: string, 
    fullName?: string, 
    type: 'emergency' | 'auth-based' | 'admin' = 'emergency'
  ): User => {
    const isAdmin = email === 'doirp@sns.ru';
    
    const typeLabels = {
      emergency: '–ê–≤–∞—Ä–∏–π–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å',
      'auth-based': '–ü—Ä–æ—Ñ–∏–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ auth –¥–∞–Ω–Ω—ã—Ö',
      admin: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ—Ä—Ç–∞–ª–∞'
    };
    
    return {
      id: userId,
      email: email || `emergency-${Date.now()}@sns.local`,
      full_name: fullName || (isAdmin ? '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ—Ä—Ç–∞–ª–∞' : `${typeLabels[type]} - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å`),
      role: isAdmin ? 'administrator' : 'employee',
      subdivision: 'management_company',
      status: 'active',
      work_experience_days: 0,
      is_active: true,
      department: 'management_company',
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    } as User;
  };

  // Function to get session with timeout (–±—ã—Å—Ç—Ä—ã–π —Ç–∞–π–º–∞—É—Ç)
  const getSessionWithTimeout = async (timeoutMs: number = 10000) => {
    console.log(`üîÑ Getting session with ${timeoutMs}ms timeout`);
    try {
      const res = await Promise.race([
        supabase.auth.getSession(),
        new Promise<never>((_, reject) => setTimeout(() => reject(new Error('Session fetch timeout exceeded')), timeoutMs))
      ]);
      return res;
    } catch (error) {
      console.error('Session fetch error:', error);
      throw error;
    }
  };

  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—ë—Ä—Ç–∫–∞ —Å —Ä—É—á–Ω—ã–º timeout
  async function withTimeout<T>(fn: () => Promise<T>, timeoutMs: number) {
    return Promise.race([
      fn(),
      new Promise<never>((_, reject) => setTimeout(() => reject(new Error('timeout')), timeoutMs))
    ]);
  }

  async function tryFetchProfileRow(userId: string) {
    const { data, error } = await supabase
      .from('users')
      .select('*')
      .eq('id', userId)
      .limit(1)
      .maybeSingle();

    if (error) throw error;
    // –≤–∞–∂–Ω—ã–π –º–æ–º–µ–Ω—Ç: –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∏ –Ω–µ—Ç ‚Äî data === null –±–µ–∑ error
    return data as User | null;
  }

  // –ê–∫–∫—É—Ä–∞—Ç–Ω–æ–µ –∞–≤—Ç–æ-—Å–æ–∑–¥–∞–Ω–∏–µ —Å –º—è–≥–∫–∏–º fallback
  async function ensureProfile(userId: string): Promise<User> {
    const { data: auth } = await supabase.auth.getUser();
    const meta = auth?.user?.user_metadata || {};
    const base: User = {
      id: userId,
      email: auth?.user?.email || `user-${userId}@sns.local`,
      full_name: meta.full_name || `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId.slice(0, 8)}`,
      role: (auth?.user?.email === 'doirp@sns.ru') ? 'administrator' : 'employee',
      subdivision: 'management_company',
      status: 'active',
      work_experience_days: 0,
      is_active: true,
      department: meta.department || 'management_company',
      phone: meta.phone || '',
      sap_number: meta.sap_number || null,
      position_id: meta.position_id || null,
      branch_id: meta.branch_id || null,
      territory_id: meta.territory_id || null,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString(),
    } as User;

    // –ø—Ä–æ–±—É–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å; –ø—Ä–∏ RLS –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω—ë–º base
    const { data: saved, error } = await supabase
      .from('users')
      .upsert(base, { onConflict: 'id' })
      .select('*')
      .maybeSingle();

    if (error) {
      console.warn('‚ö†Ô∏è RLS/insert blocked, using fallback profile in-memory:', error.message);
      return base;
    }
    return (saved || base) as User;
  }



  // –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è ‚Äî single-flight + backoff + –¥–ª–∏–Ω–Ω—ã–π timeout
  const fetchUserProfile = async (userId: string, {foreground = true}: {foreground?: boolean} = {}) => {
    if (!userId) {
      setAuthError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      setLoading(false);
      setLoadingPhase('error');
      return;
    }

    // –µ—Å–ª–∏ —É–∂–µ –∏–¥—ë—Ç –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å ‚Äî –∂–¥—ë–º –µ–≥–æ
    if (inFlightProfile.current) {
      console.log('‚è≥ Awaiting in-flight profile request');
      const u = await inFlightProfile.current;
      if (u) {
        setUser(u);
        setUserProfile(u);
        cacheUserProfile(u);
        if (foreground) {           // ‚Üê –¥–æ–±–∞–≤–∏–ª —É—Å–ª–æ–≤–∏–µ
          setLoading(false);
          setLoadingPhase('complete');
        }
      }
      return;
    }

    const runner = (async (): Promise<User | null> => {
      try {
        if (foreground) {
          setLoadingPhase('profile-fetch');
          setLoading(true);
          setAuthError(null);
        }

        // 1) –∫—ç—à - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ä–∞–∑—É –∏ –Ω–µ –∂–¥–µ–º
        const cached = getUserFromCache();
        let usedCache = false;
        let cachedUser: User | null = null;
        if (cached && cached.id === userId) {
          console.log('‚úÖ Using cached user profile:', cached.id);
          usedCache = true;
          cachedUser = { ...cached, position: cached.position || '–î–æ–ª–∂–Ω–æ—Å—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞' };
          // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–µ—à —Å—Ä–∞–∑—É –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
          setUser(cachedUser);
          setUserProfile(cachedUser);
          if (foreground) {
            setLoading(false);
            setLoadingPhase('complete');
          }
          // –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
          setTimeout(() => {
            console.log('üîÑ Background profile refresh started');
            fetchUserProfile(userId, { foreground: false }).catch(e => 
              console.warn('Background refresh failed:', e.message)
            );
          }, 100);
          return cachedUser;
        }

        // 2) —Å–µ—Ç —Å —Ä–µ—Ç—Ä–∞—è–º–∏ (–±—ã—Å—Ç—Ä—ã–µ —Ç–∞–π–º–∞—É—Ç—ã)
        for (let attempt = 1; attempt <= 2; attempt++) {
          try {
            const row = await withTimeout(() => tryFetchProfileRow(userId), 5000);
            if (row) {
              const u = { ...row, position: row.position || '–î–æ–ª–∂–Ω–æ—Å—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞' } as User;
              setUser(u);
              setUserProfile(u);
              cacheUserProfile(u);
              if (foreground) {
                setLoading(false);
                setLoadingPhase('complete');
              }
              return u;
            }
            // —Å—Ç—Ä–æ–∫–∏ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º
            const created = await withTimeout(() => ensureProfile(userId), 5000);
            const u = { ...created, position: created.position || '–î–æ–ª–∂–Ω–æ—Å—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞' } as User;
            setUser(u);
            setUserProfile(u);
            cacheUserProfile(u);
            if (foreground) {
              setLoading(false);
              setLoadingPhase('complete');
            }
            return u;
          } catch (e: any) {
            console.warn(`üîÅ Profile attempt ${attempt} failed:`, e.message || e);
            await delay(200 * attempt); // –±—ã—Å—Ç—Ä—ã–π backoff
          }
        }

        // 3) –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –º—è–≥–∫–∏–π —Ñ–æ–ª–±—ç–∫
        
        console.warn('üö® Using auth-based fallback after retries');
        const { data: authData } = await supabase.auth.getUser();
        const isAdmin = authData?.user?.email === 'doirp@sns.ru';
        const fb = createFallbackUser(userId, authData?.user?.email, authData?.user?.user_metadata?.full_name, 'auth-based');
        setUser(fb);
        setUserProfile(fb);
        cacheUserProfile(fb);
        if (foreground) {
          setAuthError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ –ë–î. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å.');
          setLoading(false);
          setLoadingPhase('complete'); // –Ω–µ 'error', —á—Ç–æ–±—ã UI –Ω–µ –ø—Ä–∏–ª–∏–ø–∞–ª
        }
        return fb;
      } finally {
        inFlightProfile.current = null;
      }
    })();

    inFlightProfile.current = runner;
    await runner;
  };

  // Retry mechanism
  const retryFetchProfile = async () => {
    if (retryCount >= 3) {
      console.warn('‚ö†Ô∏è Maximum retry attempts reached');
      setAuthError('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
      return;
    }
    
    if (session?.user?.id) {
      setRetryCount(prev => prev + 1);
      console.log(`üîÑ Retrying profile fetch (attempt ${retryCount + 1}/3)`);
      await fetchUserProfile(session.user.id, { foreground: true });
    }
  };

  // –†—É—á–Ω–æ–π refresh ‚Äî –±–µ–∑ ¬´–ª–æ–º–∞–Ω–∏—è¬ª —Ñ–∞–∑ –∏ –±–µ–∑ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ –¥–æ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
  const refreshProfile = async () => {
    if (!session?.user) return;
    console.log('üîÑ Refreshing user profile...');
    try {
      await fetchUserProfile(session.user.id, { foreground: true });
      console.log('‚úÖ Profile refresh completed');
    } catch (e) {
      console.warn('‚ö†Ô∏è Refresh failed:', (e as any)?.message);
    }
  };

  const resetAuth = () => {
    console.log('üîÑ Resetting authentication state and clearing cache');
    setLoading(false);
    setUser(null);
    setAuthError(null);
    setUserProfile(null);
    setSession(null);
    setRetryCount(0);
    setLoadingPhase('reset');
    clearUserCache();
    
    // –û—á–∏—â–∞–µ–º –≤–µ—Å—å localStorage –∏ sessionStorage
    try {
      localStorage.clear();
      sessionStorage.clear();
      console.log('üßπ Cleared localStorage and sessionStorage');
    } catch (error) {
      console.warn('‚ö†Ô∏è Could not clear storage:', error);
    }
    
    supabase.auth.signOut();
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
    setTimeout(() => {
      window.location.reload();
    }, 100);
  };

  const signIn = async (identifier: string, password: string): Promise<{ data: any; error: any }> => {
    try {
      console.log(`üîë Attempting to sign in with identifier: ${identifier}`);
      
      if (identifier === 'doirp@sns.ru' && password === '123456') {
        console.log('Using admin credentials - special handling');
      }
      
      setAuthError(null); // Clear any previous errors
      setLoading(true); // Set loading state

      const isEmail = identifier.includes('@');
      console.log(`üîë Login type: ${isEmail ? 'email' : 'SAP'}`);
      
      if (isEmail) {
        const result = await supabase.auth.signInWithPassword({
          email: identifier,
          password,
        });
        
        // Enhanced error handling for better user experience
        if (result.error) {
          let errorMessage = result.error.message;
          
          if (result.error.message.includes('Invalid login credentials')) {
            errorMessage = '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ email –∏ –ø–∞—Ä–æ–ª—å –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.';
          } else if (result.error.message.includes('Email not confirmed')) {
            errorMessage = 'Email –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞.';
          } else if (result.error.message.includes('Too many requests')) {
            errorMessage = '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
          } else if (result.error.message.includes('User not found')) {
            errorMessage = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.';
          }
          
          // Set the auth error state so the UI can react to it
          setAuthError(errorMessage);
          setLoading(false);
          console.log('üìù Sign in error:', errorMessage);
          return { data: result.data, error: { message: errorMessage } };
        }
        
        console.log('‚úÖ Sign in success:', result.data?.session ? 'Session obtained' : 'No session');
          
        // Clear any previous errors on successful sign in
        setAuthError(null);
        return result;
      } else {
        // Handle SAP number login
        try {
          const { data: userData, error: userError } = await supabase
            .from('users')
            .select('email')
            .eq('sap_number', identifier.trim())
            .maybeSingle();

          if (userError || !userData?.email) {
            const errorMsg = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º SAP –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω';
            setAuthError(errorMsg);
            setLoading(false);
            return { 
              data: null, 
              error: { message: errorMsg } 
            };
          }

          const result = await supabase.auth.signInWithPassword({
            email: userData.email,
            password,
          });
          
          if (result.error) {
            const errorMessage = result.error.message.includes('Invalid login credentials') 
              ? '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ SAP –Ω–æ–º–µ—Ä–∞'
              : result.error.message;
            setAuthError(errorMessage);
            setLoading(false);
            return { data: result.data, error: { message: errorMessage } };
          }
          
          // Clear any previous errors on successful sign in
          setAuthError(null);
          console.log('SignIn result for SAP user:', result);
          return result;
        } catch (error: any) {
          console.error('‚ùå Error finding user by SAP:', error);
          const errorMsg = `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`;
          setAuthError(errorMsg);
          setLoading(false);
          return { 
            data: null, 
            error: { message: errorMsg } 
          };
        }
      }
    } catch (error: any) {
      console.error('‚ùå Error in signIn:', error);
      const errorMsg = `–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`;
      setAuthError(errorMsg);
      setLoading(false);
      return { 
        data: null, 
        error: { message: errorMsg } 
      };
    } finally {
      // Ensure loading is set to false in all cases
      setLoading(false);
    }
  };

  const signOut = async () => {
    console.log('üö™ Signing out user');

    // 1) –°–Ω–∞—á–∞–ª–∞ —Ä–∞–∑–ª–æ–≥–∏–Ω–∏–≤–∞–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    const result = await supabase.auth.signOut();

    // 2) –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ ‚Äî —á–∏—Å—Ç–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∫—ç—à
    setUser(null);
    setUserProfile(null);
    setSession(null);
    setAuthError(null);
    setRetryCount(0);
    setLoadingPhase('logged-out');
    clearUserCache();

    try {
      localStorage.clear();
      sessionStorage.clear();
    } catch (e) {
      console.warn('‚ö†Ô∏è Could not clear storage:', e);
    }
    return result;
  };

  // Main effect for authentication state management
  useEffect(() => {
    let isMounted = true;
    
    console.log('üîê Auth provider initialized');
    
    // Initialize authentication
    const initializeAuth = async () => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ AuthCallback
      if (window.authCallbackProcessing) {
        console.log('‚è≥ AuthCallback is processing, skipping initialization');
        setLoadingPhase('auth-change');
        setLoading(true);
        
        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ AuthCallback
        const checkAuthCallback = () => {
          if (!window.authCallbackProcessing) {
            console.log('‚úÖ AuthCallback finished, retrying initialization');
            initializeAuth();
          } else {
            setTimeout(checkAuthCallback, 100);
          }
        };
        setTimeout(checkAuthCallback, 100);
        return;
      }
      
      setLoadingPhase('session-fetch');
      console.log('üì• Starting session fetch');
      
      try {
        // Get initial session with timeout
        const sessionResult = await getSessionWithTimeout(10000);
        if (!isMounted) return;
        
        if (sessionResult.error) {
          throw sessionResult.error;
        }
        
        const session = sessionResult.data.session;
        setSession(session);
        
        if (session?.user) {
          console.log('‚úÖ Initial session found, fetching profile');
          setLoadingPhase('profile-fetch');
          
          // Look for cached profile first
          const cachedUser = getUserFromCache();
          if (cachedUser && cachedUser.id === session.user.id) {
            console.log('‚úÖ Using cached user profile');
            setUser(cachedUser);
            setUserProfile(cachedUser);
            setLoadingPhase('complete');
            setLoading(false);
            
            // Still fetch profile in background for latest data
            fetchUserProfile(session.user.id, { foreground: false }).catch(console.error);
          } else {
            // No valid cached profile, fetch from server
            await fetchUserProfile(session.user.id, { foreground: true });
          }
        } else {
          console.log('‚ÑπÔ∏è No initial session found');
          setLoadingPhase('ready');
          setLoading(false);
        }
      } catch (error: any) {
        console.error('‚ùå Error in initializeAuth:', error);
        
        if (!isMounted) return;
        
        // Don't show error immediately on timeout, just complete loading
        // User can still try to login
        console.warn('‚ö†Ô∏è Auth initialization failed:', error.message);
        
        setLoadingPhase('ready');
        setLoading(false);
      }
    };
    
    // Start initialization
    initializeAuth();

    // Listen for auth changes
    const authSubscription = supabase.auth.onAuthStateChange(async (event, session) => {
      if (!isMounted) return;
      
      console.log('üîÑ Auth state changed:', event, session?.user?.id?.substring(0, 8));
      setSession(session);
      
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ INITIAL_SESSION
      if (event === 'INITIAL_SESSION') {
        if (!session?.user) {
          // –Ω–µ—Ç —Å–µ—Å—Å–∏–∏ ‚Äî —Å—Ä–∞–∑—É –≤—ã—Ö–æ–¥–∏–º –∏–∑ –∑–∞–≥—Ä—É–∑–∫–∏
          console.log('‚ÑπÔ∏è No initial session found');
          setUser(null);
          setUserProfile(null);
          setAuthError(null);
          setLoadingPhase('ready');
          setLoading(false);
          return;
        }
        // –µ—Å—Ç—å —é–∑–µ—Ä –≤ initial session ‚Äî –≥—Ä—É–∑–∏–º –ø—Ä–æ—Ñ–∏–ª—å
        console.log('‚úÖ Initial session found, loading profile');
        setLoadingPhase('profile-fetch');
        await fetchUserProfile(session.user.id, { foreground: true });
        return;
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Å–æ–±—ã—Ç–∏–π (SIGNED_IN, SIGNED_OUT, etc.)
      if (session?.user) {
        console.log('‚úÖ New session after auth change');
        setLoadingPhase('auth-change');
        
        // Check if user is the same as current user
        if (user?.id === session.user.id) {
          console.log('‚úÖ User ID matches existing user, keeping current profile');
          setLoadingPhase('complete');
          setLoading(false);
        } else {
          await fetchUserProfile(session.user.id, { foreground: true });
        }
      } else {
        console.log('‚ÑπÔ∏è No session after auth change');
        setLoadingPhase('logged-out');
        setUser(null);
        setUserProfile(null);
        setLoading(false);
      }
    });

    // Return cleanup function
    return () => {
      isMounted = false;
      authSubscription?.data?.subscription?.unsubscribe?.();
    };
  }, []);

  // –£–î–ê–õ–ï–ù –∞–≤–∞—Ä–∏–π–Ω—ã–π —Ç–∞–π–º–µ—Ä - –æ–Ω –±—ã–ª –ø—Ä–∏—á–∏–Ω–æ–π –ø—Ä–æ–±–ª–µ–º

  const value: AuthContextType = {
    user,
    userProfile,
    session,
    loading,
    authError,
    loadingPhase,
    signIn,
    signOut,
    resetAuth,
    refreshProfile,
    retryFetchProfile
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
}

export function useAuth(): AuthContextType {
  const context = useContext(AuthContext);
  if (context === undefined) {
    console.error('‚ùå useAuth used outside AuthProvider - this is a critical error');
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
}