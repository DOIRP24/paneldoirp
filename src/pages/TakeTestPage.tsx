import React, { useEffect, useState } from 'react';
import { useSearchParams, useNavigate } from 'react-router-dom';
import { useAuth } from '../hooks/useAuth';
import { supabase } from '../lib/supabase';
import { TestTakingView } from '../components/admin/TestTakingView';
import { EnhancedMobileTestTakingView } from '../components/admin/EnhancedMobileTestTakingView';
import { useMobile } from '../hooks/use-mobile';

function Loader() {
  return <div style={{ textAlign: 'center', marginTop: 40 }}>–ó–∞–≥—Ä—É–∑–∫–∞...</div>;
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏
async function createAttempt({ eventId, testId, userId }: { eventId: string, testId: string, userId: string }) {
  console.log('üîç createAttempt –≤—ã–∑–≤–∞–Ω–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', { eventId, testId, userId });
  
  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ø—ã—Ç–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ç–µ—Å—Ç–∞ –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
  const { data: existingAttempt, error: checkError } = await supabase
    .from('user_test_attempts')
    .select('id, status')
    .eq('event_id', eventId)
    .eq('test_id', testId)
    .eq('user_id', userId)
    .maybeSingle();

  if (checkError) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ø—ã—Ç–æ–∫:', checkError);
    throw checkError;
  }

  // –ï—Å–ª–∏ –ø–æ–ø—ã—Ç–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ—ë ID
  if (existingAttempt) {
    console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞:', existingAttempt.id, '—Å—Ç–∞—Ç—É—Å:', existingAttempt.status);
    return existingAttempt.id;
  }

  // –ï—Å–ª–∏ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é
  console.log('üÜï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–æ–ø—ã—Ç–∫—É –≤ createAttempt');
  const { data, error } = await supabase
    .from('user_test_attempts')
    .insert({ event_id: eventId, test_id: testId, user_id: userId, status: 'in_progress' })
    .select()
    .single();
  
  if (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ø—ã—Ç–∫–∏:', error);
    throw error;
  }
  
  console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤ createAttempt:', data.id);
  return data.id;
}

export default function TakeTestPage() {
  const [searchParams, setSearchParams] = useSearchParams();
  const navigate = useNavigate();
  const { userProfile } = useAuth();
  const isMobile = useMobile();
  const [attemptId, setAttemptId] = useState<string | null>(null);
  const [loading, setLoading] = useState(true);

  const eventId = searchParams.get('eventId');
  const testId = searchParams.get('testId');
  const urlAttemptId = searchParams.get('attemptId');

  useEffect(() => {
    console.log('üéØ TakeTestPage useEffect –≤—ã–∑–≤–∞–Ω —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', { eventId, testId, urlAttemptId, userId: userProfile?.id });
    
    if (!eventId || !testId || !userProfile?.id) {
      console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã');
      setLoading(false);
      return;
    }
    
    if (urlAttemptId) {
      console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π attemptId:', urlAttemptId);
      setAttemptId(urlAttemptId);
      setLoading(false);
      return;
    }
    
    // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –ø–æ–ø—ã—Ç–∫—É
    console.log('üÜï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–æ–ø—ã—Ç–∫—É –≤ TakeTestPage');
    setLoading(true);
    createAttempt({ eventId, testId, userId: userProfile.id })
      .then((newAttemptId) => {
        console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞:', newAttemptId);
        setSearchParams({ eventId, testId, attemptId: newAttemptId });
        setAttemptId(newAttemptId);
      })
      .catch((error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ø—ã—Ç–∫–∏ –≤ TakeTestPage:', error);
        setLoading(false);
      });
  }, [eventId, testId, urlAttemptId, userProfile?.id, setSearchParams]);

  if (loading || !eventId || !testId || !attemptId) return <Loader />;

  const TestComponent = isMobile ? EnhancedMobileTestTakingView : TestTakingView;

  return (
    <TestComponent
      eventId={eventId}
      testId={testId}
      attemptId={attemptId}
      onComplete={() => {
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        navigate(`/event/${eventId}`);
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ö–æ–¥–∞
        setTimeout(() => {
          window.location.reload();
        }, 100);
      }}
      onCancel={() => navigate(`/event/${eventId}`)}
    />
  );
} 