import React, { useEffect, useState, useRef } from 'react';
import { useNavigate } from 'react-router-dom';
import { supabase } from '../lib/supabase';
import { CheckCircle, AlertCircle, Loader2 } from 'lucide-react';

// –†–∞—Å—à–∏—Ä—è–µ–º window –¥–ª—è —Ñ–ª–∞–≥–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
declare global {
  interface Window {
    authCallbackProcessing?: boolean;
  }
}

export default function AuthCallback() {
  const navigate = useNavigate();
  const [status, setStatus] = useState<'loading' | 'success' | 'error'>('loading');
  const [message, setMessage] = useState('–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
  const executedRef = useRef(false);

  useEffect(() => {
    console.log('üöÄ AuthCallback component mounted!');
    
    if (executedRef.current) {
      console.log('‚ö†Ô∏è Already executed, skipping...');
      return;
    }
    
    const handleAuthCallback = async () => {
      try {
        executedRef.current = true;
        console.log('üîÑ Processing auth callback...');
        console.log('Current URL:', window.location.href);
        console.log('Search params:', window.location.search);
        console.log('Hash params:', window.location.hash);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
        const timeoutPromise = new Promise((_, reject) => 
          setTimeout(() => reject(new Error('Auth callback timeout after 15 seconds')), 15000)
        );
        
        const authPromise = (async () => {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ URL –¥–ª—è –æ—à–∏–±–æ–∫
          const urlParams = new URLSearchParams(window.location.search);
          const hashParams = new URLSearchParams(window.location.hash.substring(1));
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫ –≤ URL
          const error = urlParams.get('error') || hashParams.get('error');
          const errorCode = urlParams.get('error_code') || hashParams.get('error_code');
          const errorDescription = urlParams.get('error_description') || hashParams.get('error_description');
          
          if (error) {
            console.error('‚ùå Auth error from URL:', { error, errorCode, errorDescription });
            
            if (error === 'server_error' && errorCode === 'unexpected_failure') {
              throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${decodeURIComponent(errorDescription || 'Unknown error')}`);
            }
            
            throw new Error(`–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${error} - ${errorDescription || 'Unknown error'}`);
          }

          // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º access_token –∏ refresh_token (–æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–æ—Å–æ–± –¥–ª—è magic link)
          const accessToken = urlParams.get('access_token') || hashParams.get('access_token');
          const refreshToken = urlParams.get('refresh_token') || hashParams.get('refresh_token');
          const type = urlParams.get('type') || hashParams.get('type');
          
          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —á—Ç–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
          window.authCallbackProcessing = true;
          
          console.log('Access token present:', !!accessToken);
          console.log('Refresh token present:', !!refreshToken);
          console.log('Token type:', type);

          if (accessToken && refreshToken && type === 'magiclink') {
            console.log('‚úÖ Magic link tokens found, setting session...');
            
            try {
              const { data, error } = await supabase.auth.setSession({
                access_token: accessToken,
                refresh_token: refreshToken
              });

              if (error) {
                console.error('‚ùå Error setting session:', error);
                throw error;
              }

              console.log('üîç setSession result:', { user: !!data.user, session: !!data.session });
              
              if (data.user) {
                console.log('‚úÖ Magic link session set successfully:', data.user.email);
                
                // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ —á—Ç–æ–±—ã —Å–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞—Å—å
                await new Promise(resolve => setTimeout(resolve, 500));
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
                const { data: { session: s } } = await supabase.auth.getSession();
                console.log('üß© getSession says:', !!s?.user);
                
                if (s?.user) {
                  setStatus('success');
                  setMessage('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...');
                  
                  // –û—á–∏—â–∞–µ–º URL –∏ –¥–µ–ª–∞–µ–º –∂—ë—Å—Ç–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥
                  window.history.replaceState({}, '', '/');
                  console.log('üöÄ Redirecting to home...');
                  window.location.replace('/');
                  return;
                } else {
                  throw new Error('–°–µ—Å—Å–∏—è –Ω–µ –±—ã–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
                }
              } else {
                console.log('‚ö†Ô∏è setSession successful but no user in response, checking session...');
              
                // –î–∞–∂–µ –µ—Å–ª–∏ data.user –ø—É—Å—Ç–æ–π, –ø—Ä–æ–≤–µ—Ä–∏–º —Å–µ—Å—Å–∏—é
                const { data: { session: currentSession } } = await supabase.auth.getSession();
                if (currentSession?.user) {
                  console.log('‚úÖ User found in current session:', currentSession.user.email);
                  
                  setStatus('success');
                  setMessage('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...');
                  
                  // –û—á–∏—â–∞–µ–º URL –∏ –¥–µ–ª–∞–µ–º –∂—ë—Å—Ç–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥
                  window.history.replaceState({}, '', '/');
                  console.log('üöÄ Redirecting to home...');
                  window.location.replace('/');
                  return;
                } else {
                  throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
                }
              }
            } catch (sessionError) {
              console.error('‚ùå Session setup failed:', sessionError);
              throw sessionError;
            }
          }

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º verification —Ç–æ–∫–µ–Ω (–æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–æ—Å–æ–± –¥–ª—è magic link —Å URL –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏)
          const token = urlParams.get('token') || hashParams.get('token');

          if (token && (type === 'magiclink' || urlParams.get('type') === 'magiclink')) {
            console.log('‚úÖ Magic link token found in URL params, verifying...');
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º verifyOtp –¥–ª—è magic link –∏–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            const { data, error } = await supabase.auth.verifyOtp({
              token_hash: token,
              type: 'magiclink'
            });

            if (error) {
              console.error('‚ùå Error verifying magic link token:', error);
              throw error;
            }

            if (data.user) {
              console.log('‚úÖ Magic link token verified successfully:', data.user.email);
              
              setStatus('success');
              setMessage('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...');
              
              // –û—á–∏—â–∞–µ–º URL –∏ –¥–µ–ª–∞–µ–º –∂—ë—Å—Ç–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥
              window.history.replaceState({}, '', '/');
              console.log('üöÄ Redirecting to home...');
              window.location.replace('/');
              return;
            }
          }

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º hash —Ç–æ–∫–µ–Ω—ã (–¥–ª—è OAuth –∏ –¥—Ä—É–≥–∏—Ö –º–µ—Ç–æ–¥–æ–≤)
          const hashToken = hashParams.get('access_token');
          const hashType = hashParams.get('type');
          
          if (hashToken && hashType) {
            console.log('‚úÖ Hash tokens found, processing...');
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é –∏–∑ hash —Ç–æ–∫–µ–Ω–æ–≤
            const { data, error } = await supabase.auth.setSession({
              access_token: hashToken,
              refresh_token: hashParams.get('refresh_token') || ''
            });

            if (error) {
              console.error('‚ùå Error setting session from hash:', error);
              throw error;
            }

            if (data.user) {
              console.log('‚úÖ Hash session set successfully:', data.user.email);
              
              setStatus('success');
              setMessage('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...');
              
              // –û—á–∏—â–∞–µ–º URL –∏ –¥–µ–ª–∞–µ–º –∂—ë—Å—Ç–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥
              window.history.replaceState({}, '', '/');
              console.log('üöÄ Redirecting to home...');
              window.location.replace('/');
              return;
            }
          }

          // –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ —Å—é–¥–∞ –∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ
          console.log('‚ùå No suitable authentication method found');
          setStatus('error');
          setMessage('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–∫–µ–Ω—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
          setTimeout(() => {
            window.location.replace('/');
          }, 3000);
        })(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º authPromise
        
        // –ñ–¥–µ–º –ª–∏–±–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –ª–∏–±–æ —Ç–∞–π–º–∞—É—Ç–∞
        await Promise.race([authPromise, timeoutPromise]);

      } catch (error: any) {
        console.error('‚ùå Auth callback error:', error);
        setStatus('error');
        setMessage(error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
        setTimeout(() => {
          window.location.replace('/');
        }, 3000);
      } finally {
        // –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        window.authCallbackProcessing = false;
      }
    };

    handleAuthCallback();
  }, [navigate]);

  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-[#e5f3ff] via-[#eafaf1] to-[#b6e0fe] px-4">
      <div className="bg-white rounded-xl p-8 shadow-lg border border-gray-200 max-w-md w-full text-center">
        {status === 'loading' && (
          <>
            <div className="w-16 h-16 bg-blue-100 rounded-full mx-auto flex items-center justify-center mb-4">
              <Loader2 className="w-8 h-8 text-blue-600 animate-spin" />
            </div>
            <h2 className="text-xl font-semibold text-gray-900 mb-2">–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</h2>
            <p className="text-gray-600">{message}</p>
          </>
        )}

        {status === 'success' && (
          <>
            <div className="w-16 h-16 bg-green-100 rounded-full mx-auto flex items-center justify-center mb-4">
              <CheckCircle className="w-8 h-8 text-green-600" />
            </div>
            <h2 className="text-xl font-semibold text-gray-900 mb-2">–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!</h2>
            <p className="text-gray-600 mb-4">{message}</p>
            <button
              onClick={() => window.location.replace('/')}
              className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
            >
              –ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            </button>
          </>
        )}

        {status === 'error' && (
          <>
            <div className="w-16 h-16 bg-red-100 rounded-full mx-auto flex items-center justify-center mb-4">
              <AlertCircle className="w-8 h-8 text-red-600" />
            </div>
            <h2 className="text-xl font-semibold text-gray-900 mb-2">–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</h2>
            <p className="text-gray-600 mb-4">{message}</p>
            <button
              onClick={() => window.location.replace('/')}
              className="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors"
            >
              –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
            </button>
          </>
        )}
      </div>
    </div>
  );
}