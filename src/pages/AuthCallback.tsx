import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { supabase } from '../lib/supabase';
import { CheckCircle, AlertCircle, Loader2 } from 'lucide-react';

export default function AuthCallback() {
  const navigate = useNavigate();
  const [status, setStatus] = useState<'loading' | 'success' | 'error'>('loading');
  const [message, setMessage] = useState('–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
  const [processing, setProcessing] = useState(false);
  const [hasExecuted, setHasExecuted] = useState(false);

  useEffect(() => {
    console.log('üöÄ AuthCallback component mounted!');
    
    if (processing || hasExecuted) {
      console.log('‚ö†Ô∏è Already processing or executed, skipping...');
      return;
    }
    
    const handleAuthCallback = async () => {
      try {
        setProcessing(true);
        setHasExecuted(true);
        console.log('üîÑ Processing auth callback...');
        console.log('Current URL:', window.location.href);
        console.log('Search params:', window.location.search);
        console.log('Hash params:', window.location.hash);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ URL –¥–ª—è –æ—à–∏–±–æ–∫
        const urlParams = new URLSearchParams(window.location.search);
        const hashParams = new URLSearchParams(window.location.hash.substring(1));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫ –≤ URL
        const error = urlParams.get('error') || hashParams.get('error');
        const errorCode = urlParams.get('error_code') || hashParams.get('error_code');
        const errorDescription = urlParams.get('error_description') || hashParams.get('error_description');
        
        if (error) {
          console.error('‚ùå Auth error from URL:', { error, errorCode, errorDescription });
          
          if (error === 'server_error' && errorCode === 'unexpected_failure') {
            throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${decodeURIComponent(errorDescription || 'Unknown error')}`);
          }
          
          throw new Error(`–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${error} - ${errorDescription || 'Unknown error'}`);
        }

        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º access_token –∏ refresh_token (–æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–æ—Å–æ–± –¥–ª—è magic link)
        const accessToken = urlParams.get('access_token') || hashParams.get('access_token');
        const refreshToken = urlParams.get('refresh_token') || hashParams.get('refresh_token');
        const type = urlParams.get('type') || hashParams.get('type');
        
        console.log('Access token present:', !!accessToken);
        console.log('Refresh token present:', !!refreshToken);
        console.log('Token type:', type);

        if (accessToken && refreshToken && type === 'magiclink') {
          console.log('‚úÖ Magic link tokens found, setting session...');
          
          // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ
          try {
            console.log('üîç Quick check if user is already signed in...');
            const { data: { session: currentSession } } = await supabase.auth.getSession();
            if (currentSession?.user) {
              console.log('‚úÖ User already has active session:', currentSession.user.email);
              setStatus('success');
              setMessage('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...');
              setTimeout(() => {
                console.log('üöÄ Quick redirect executing...');
                window.location.replace('/');
              }, 100);
              return;
            }
            console.log('üîÑ No current session, proceeding with setSession...');
          } catch (preCheckErr) {
            console.log('‚ö†Ô∏è Pre-check failed, proceeding with setSession:', preCheckErr);
          }
          
          try {
            console.log('üîÑ Calling setSession...');
            
            // –î–æ–±–∞–≤–ª—è–µ–º timeout –¥–ª—è setSession
            const setSessionPromise = supabase.auth.setSession({
              access_token: accessToken,
              refresh_token: refreshToken
            });
            
            const timeoutPromise = new Promise((_, reject) => 
              setTimeout(() => reject(new Error('setSession timeout after 5 seconds')), 5000)
            );
            
            const { data, error } = await Promise.race([setSessionPromise, timeoutPromise]) as any;

            console.log('üîç setSession result:', { data: !!data?.user, error: !!error });

            if (error) {
              console.error('‚ùå Error setting session:', error);
              throw error;
            }

            if (data.user) {
              console.log('‚úÖ Magic link session set successfully:', data.user.email);
              console.log('üîÑ Redirecting to home page...');
              setStatus('success');
              setMessage('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...');
              
              // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
              setTimeout(() => {
                console.log('üöÄ Executing redirect...');
                window.location.replace('/');
              }, 100);
              return;
            }
          } catch (err) {
            console.error('‚ùå Exception in setSession:', err);
            
            // –ï—Å–ª–∏ setSession –∑–∞–≤–∏—Å, –ø—Ä–æ–±—É–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (err.message?.includes('setSession timeout')) {
              console.log('‚ö†Ô∏è setSession timeout, checking if user is already signed in...');
              
              try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é —Å –Ω–µ–±–æ–ª—å—à–∏–º timeout
                const sessionPromise = supabase.auth.getSession();
                const sessionTimeout = new Promise((_, reject) => 
                  setTimeout(() => reject(new Error('getSession timeout')), 2000)
                );
                
                const { data: { session } } = await Promise.race([sessionPromise, sessionTimeout]) as any;
                
                if (session?.user) {
                  console.log('‚úÖ User is already signed in despite setSession timeout:', session.user.email);
                  setStatus('success');
                  setMessage('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...');
                  setTimeout(() => {
                    console.log('üöÄ Fallback redirect executing...');
                    window.location.replace('/');
                  }, 100);
                  return;
                } else {
                  console.log('‚ö†Ô∏è No session found, will try other methods...');
                }
              } catch (sessionErr) {
                console.error('‚ùå Error checking session after timeout:', sessionErr);
                // –ï—Å–ª–∏ –¥–∞–∂–µ getSession –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–¥–æ–∂–¥–∞—Ç—å –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å
                console.log('üîÑ Attempting forced redirect in case user is signed in elsewhere...');
                setStatus('success');
                setMessage('–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏... –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...');
                setTimeout(() => {
                  console.log('üöÄ Emergency redirect executing...');
                  window.location.replace('/');
                }, 1000);
                return;
              }
            }
            
            throw err;
          }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º verification —Ç–æ–∫–µ–Ω (–æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–æ—Å–æ–± –¥–ª—è magic link —Å URL –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏)
        const token = urlParams.get('token') || hashParams.get('token');

        if (token && type === 'magiclink') {
          console.log('‚úÖ Magic link token found in URL params, verifying...');
          
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º verifyOtp –¥–ª—è magic link –∏–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
          const { data, error } = await supabase.auth.verifyOtp({
            token_hash: token,
            type: 'magiclink'
          });

          if (error) {
            console.error('‚ùå Error verifying magic link:', error);
            throw error;
          }

          if (data.user) {
            console.log('‚úÖ Magic link verified successfully:', data.user.email);
            setStatus('success');
            setMessage('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...');
            window.location.replace('/');
            return;
          }
        }

        // –ï—Å–ª–∏ –Ω–µ—Ç type, –Ω–æ –µ—Å—Ç—å token - —Ç–æ–∂–µ –ø—Ä–æ–±—É–µ–º –∫–∞–∫ magic link
        if (token && !type) {
          console.log('‚úÖ Token found without type, trying as magic link...');
          
          const { data, error } = await supabase.auth.verifyOtp({
            token_hash: token,
            type: 'magiclink'
          });

          if (error) {
            console.error('‚ùå Error verifying token as magic link:', error);
          } else if (data.user) {
            console.log('‚úÖ Token verified successfully as magic link:', data.user.email);
            setStatus('success');
            setMessage('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...');
            window.location.replace('/');
            return;
          }
        }

        // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ã—á–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –±–µ–∑ type
        if (accessToken && refreshToken) {
          console.log('‚úÖ Direct tokens found, setting session...');
          const { data, error } = await supabase.auth.setSession({
            access_token: accessToken,
            refresh_token: refreshToken
          });

          if (error) {
            console.error('‚ùå Error setting session:', error);
            throw error;
          }

          if (data.user) {
            console.log('‚úÖ Session set successfully:', data.user.email);
            setStatus('success');
            setMessage('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...');
            window.location.replace('/');
            return;
          }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
        console.log('üîç Checking current session...');
        const { data: { session }, error: sessionError } = await supabase.auth.getSession();
        
        console.log('Current session:', session?.user?.email || 'No session');
        
        if (sessionError) {
          console.error('‚ùå Session error:', sessionError);
          throw sessionError;
        }

        if (session?.user) {
          console.log('‚úÖ User already authenticated:', session.user.email);
          setStatus('success');
          setMessage('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...');
          setTimeout(() => navigate('/'), 2000);
          return;
        }

        // –ñ–¥–µ–º —Å–æ–±—ã—Ç–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        console.log('‚è≥ Waiting for auth state change...');
        const { data: { subscription } } = supabase.auth.onAuthStateChange(async (event, session) => {
          console.log('üîÑ Auth state change:', event, session?.user?.email);
          
          if ((event === 'SIGNED_IN' || event === 'SIGNED_UP') && session?.user) {
            console.log('‚úÖ User signed in via magic link:', event);
            setStatus('success');
            setMessage('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...');
            setTimeout(() => navigate('/'), 2000);
          } else if (event === 'SIGNED_OUT') {
            console.log('‚ùå User signed out');
            setStatus('error');
            setMessage('–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
          }
        });

        // –¢–∞–π–º–∞—É—Ç —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
          subscription.unsubscribe();
          if (status === 'loading') {
            console.log('‚è∞ Timeout reached');
            setStatus('error');
            setMessage('–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
          }
        }, 15000);

      } catch (error: any) {
        console.error('‚ùå Auth callback error:', error);
        setStatus('error');
        setMessage(error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
      }
    };

    handleAuthCallback();
  }, [navigate]);

  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-[#e5f3ff] via-[#eafaf1] to-[#b6e0fe] px-4">
      <div className="bg-white rounded-xl p-8 shadow-lg border border-gray-200 max-w-md w-full text-center">
        {status === 'loading' && (
          <>
            <div className="w-16 h-16 bg-blue-100 rounded-full mx-auto flex items-center justify-center mb-4">
              <Loader2 className="w-8 h-8 text-blue-600 animate-spin" />
            </div>
            <h2 className="text-xl font-semibold text-gray-900 mb-2">–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</h2>
            <p className="text-gray-600">{message}</p>
          </>
        )}

        {status === 'success' && (
          <>
            <div className="w-16 h-16 bg-green-100 rounded-full mx-auto flex items-center justify-center mb-4">
              <CheckCircle className="w-8 h-8 text-green-600" />
            </div>
            <h2 className="text-xl font-semibold text-gray-900 mb-2">–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!</h2>
            <p className="text-gray-600 mb-4">{message}</p>
            <button
              onClick={() => navigate('/')}
              className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
            >
              –ü–µ—Ä–µ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É
            </button>
          </>
        )}

        {status === 'error' && (
          <>
            <div className="w-16 h-16 bg-red-100 rounded-full mx-auto flex items-center justify-center mb-4">
              <AlertCircle className="w-8 h-8 text-red-600" />
            </div>
            <h2 className="text-xl font-semibold text-gray-900 mb-2">–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</h2>
            <p className="text-gray-600 mb-4">{message}</p>
            <div className="space-y-2">
              <button
                onClick={() => navigate('/login')}
                className="w-full px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
              >
                –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
              </button>
              <button
                onClick={() => navigate('/')}
                className="w-full px-6 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors"
              >
                –ù–∞ –≥–ª–∞–≤–Ω—É—é
              </button>
            </div>
          </>
        )}
      </div>
    </div>
  );
}

