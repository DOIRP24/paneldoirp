import React, { useEffect, useRef, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { supabase } from '../lib/supabase';
import { CheckCircle, AlertCircle, Loader2 } from 'lucide-react';

type Status = 'loading' | 'success' | 'error';

export default function AuthCallback() {
  const navigate = useNavigate();
  const [status, setStatus] = useState<Status>('loading');
  const [message, setMessage] = useState('–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
  const executedRef = useRef(false);

  // –∂–¥—ë–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—É—é —Å–µ—Å—Å–∏—é: —Å–æ–±—ã—Ç–∏–µ SIGNED_IN –∏–ª–∏ —É—Å–ø–µ—à–Ω—ã–π getSession —Å —Ä–µ—Ç—Ä–∞–µ–º
  const waitForSignedIn = () =>
    new Promise<void>((resolve, reject) => {
      let resolved = false;
      const timeout = setTimeout(() => {
        if (!resolved) reject(new Error('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'));
      }, 10000);

      const unsub = supabase.auth.onAuthStateChange(async (event, session) => {
        if (event === 'SIGNED_IN' && session?.user) {
          resolved = true;
          clearTimeout(timeout);
          unsub.data.subscription.unsubscribe();
          resolve();
        }
      });

      // –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –ø—Ä–æ–±—É–µ–º getSession() —Å —Ä–µ—Ç—Ä–∞—è–º–∏
      (async () => {
        for (let i = 0; i < 5 && !resolved; i++) {
          const { data } = await supabase.auth.getSession();
          if (data.session?.user) {
            resolved = true;
            clearTimeout(timeout);
            unsub.data.subscription.unsubscribe();
            resolve();
            return;
          }
          await new Promise(r => setTimeout(r, 300));
        }
      })().catch(() => {});
    });

  useEffect(() => {
    if (executedRef.current) return;
    executedRef.current = true;

    (async () => {
      try {
        console.log('üöÄ AuthCallback mounted');
        const href = window.location.href;
        const search = new URLSearchParams(window.location.search);
        const hash = new URLSearchParams(window.location.hash.startsWith('#') ? window.location.hash.slice(1) : window.location.hash);

        // 0) –û—à–∏–±–∫–∏ –∏–∑ URL
        const err = search.get('error') || hash.get('error');
        const errCode = search.get('error_code') || hash.get('error_code');
        const errDesc = search.get('error_description') || hash.get('error_description');
        if (err) {
          throw new Error(`–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${err}${errCode ? ` (${errCode})` : ''}${errDesc ? ` ‚Äî ${decodeURIComponent(errDesc)}` : ''}`);
        }

        // 1) Happy path: —Ç–æ–∫–µ–Ω—ã –≤ —Ö—ç—à–µ (email magic link / recovery)
        const accessToken = search.get('access_token') || hash.get('access_token');
        const refreshToken = search.get('refresh_token') || hash.get('refresh_token');
        const type = search.get('type') || hash.get('type');

        if (accessToken && refreshToken) {
          console.log('üîë setSession via tokens, type:', type);
          const { error } = await supabase.auth.setSession({
            access_token: accessToken,
            refresh_token: refreshToken,
          });
          if (error) throw error;

          await waitForSignedIn();

          // —á–∏—Å—Ç–∏–º URL
          const cleanUrl = window.location.origin + window.location.pathname;
          window.history.replaceState({}, document.title, cleanUrl);

          setStatus('success');
          setMessage('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...');
          // –º—è–≥–∫–∏–π —Ä–µ–¥–∏—Ä–µ–∫—Ç (SPA)
          navigate('/', { replace: true });
          // –µ—Å–ª–∏ —Ö–æ—á–µ—à—å ¬´–∂—ë—Å—Ç–∫–∏–π¬ª —Ä–µ–±–∏–ª–¥:
          // window.location.replace('/');
          return;
        }

        // 2) Magic link —á–µ—Ä–µ–∑ token_hash (–∫–æ–≥–¥–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç ?token=...&type=magiclink –∏–ª–∏ –≤ #)
        const token = search.get('token') || hash.get('token');
        const t = (type || '').toLowerCase();
        if (token && (t === 'magiclink' || !type)) {
          console.log('üîë verifyOtp(magiclink) via token_hash');
          const { error } = await supabase.auth.verifyOtp({
            token_hash: token,
            type: 'magiclink',
          });
          if (error) throw error;

          await waitForSignedIn();
          const cleanUrl = window.location.origin + window.location.pathname;
          window.history.replaceState({}, document.title, cleanUrl);

          setStatus('success');
          setMessage('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...');
          navigate('/', { replace: true });
          return;
        }

        // 3) OAuth/PKCE: ?code=...
        const code = search.get('code');
        if (code) {
          console.log('üîë exchangeCodeForSession');
          const { error } = await supabase.auth.exchangeCodeForSession(href);
          if (error) throw error;

          await waitForSignedIn();
          const cleanUrl = window.location.origin + window.location.pathname;
          window.history.replaceState({}, document.title, cleanUrl);

          setStatus('success');
          setMessage('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...');
          navigate('/', { replace: true });
          return;
        }

        // 4) –ú–æ–∂–µ—Ç, —Å–µ—Å—Å–∏—è —É–∂–µ –µ—Å—Ç—å
        const { data, error: sErr } = await supabase.auth.getSession();
        if (sErr) throw sErr;
        if (data.session?.user) {
          setStatus('success');
          setMessage('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...');
          const cleanUrl = window.location.origin + window.location.pathname;
          window.history.replaceState({}, document.title, cleanUrl);
          navigate('/', { replace: true });
          return;
        }

        // 5) –ù–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
      } catch (e: any) {
        console.error('‚ùå Auth callback error:', e);
        setStatus('error');
        setMessage(e?.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
        // –º—è–≥–∫–∏–π –∫–∞–º–±—ç–∫ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —á–µ—Ä–µ–∑ 3 —Å–µ–∫
        setTimeout(() => navigate('/', { replace: true }), 3000);
      }
    })();
  }, [navigate]);

  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-[#e5f3ff] via-[#eafaf1] to-[#b6e0fe] px-4">
      <div className="bg-white rounded-xl p-8 shadow-lg border border-gray-200 max-w-md w-full text-center">
        {status === 'loading' && (
          <>
            <div className="w-16 h-16 bg-blue-100 rounded-full mx-auto flex items-center justify-center mb-4">
              <Loader2 className="w-8 h-8 animate-spin" />
            </div>
            <h2 className="text-xl font-semibold mb-2">–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</h2>
            <p className="text-gray-600">{message}</p>
          </>
        )}

        {status === 'success' && (
          <>
            <div className="w-16 h-16 bg-green-100 rounded-full mx-auto flex items-center justify-center mb-4">
              <CheckCircle className="w-8 h-8" />
            </div>
            <h2 className="text-xl font-semibold mb-2">–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!</h2>
            <p className="text-gray-600 mb-4">{message}</p>
            <button
              onClick={() => navigate('/', { replace: true })}
              className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
            >
              –ü–µ—Ä–µ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É
            </button>
          </>
        )}

        {status === 'error' && (
          <>
            <div className="w-16 h-16 bg-red-100 rounded-full mx-auto flex items-center justify-center mb-4">
              <AlertCircle className="w-8 h-8" />
            </div>
            <h2 className="text-xl font-semibold mb-2">–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</h2>
            <p className="text-gray-600 mb-4">{message}</p>
            <div className="space-y-2">
              <button
                onClick={() => navigate('/login', { replace: true })}
                className="w-full px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
              >
                –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
              </button>
              <button
                onClick={() => navigate('/', { replace: true })}
                className="w-full px-6 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors"
              >
                –ù–∞ –≥–ª–∞–≤–Ω—É—é
              </button>
            </div>
          </>
        )}
      </div>
    </div>
  );
}
