import React, { useEffect, useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { Loader2, CheckCircle, AlertCircle } from 'lucide-react';
import { supabase } from '../lib/supabase';

export default function QRAuthPage() {
  const { token } = useParams<{ token: string }>();
  const navigate = useNavigate();
  const [status, setStatus] = useState<'loading' | 'success' | 'error'>('loading');
  const [message, setMessage] = useState<string>('–û–±—Ä–∞–±–æ—Ç–∫–∞ QR —Ç–æ–∫–µ–Ω–∞...');
  const [step, setStep] = useState<'qr' | 'auth' | 'profile'>('qr');

  useEffect(() => {
    console.log('üöÄ QRAuthPage mounted with token:', token ? token.substring(0, 8) + '...' : 'NO TOKEN');
    
    if (!token) {
      console.error('‚ùå No token provided');
      setStatus('error');
      setMessage('–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    const processQRToken = async () => {
      try {
        console.log('üîç Processing QR token:', token.substring(0, 8) + '...');
        console.log('üåê Calling Edge Function URL:', `${import.meta.env.VITE_SUPABASE_URL}/functions/v1/auth-by-qr-token`);
        
        // –®–∞–≥ 1: –û–±—Ä–∞–±–æ—Ç–∫–∞ QR —Ç–æ–∫–µ–Ω–∞
        setStep('qr');
        setMessage('–û–±—Ä–∞–±–æ—Ç–∫–∞ QR —Ç–æ–∫–µ–Ω–∞...');
        
        const response = await fetch(`${import.meta.env.VITE_SUPABASE_URL}/functions/v1/auth-by-qr-token`, {
          method: 'POST',
          headers: {
            'apikey': import.meta.env.VITE_SUPABASE_ANON_KEY,
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${import.meta.env.VITE_SUPABASE_ANON_KEY}`
          },
          body: JSON.stringify({ token })
        });

        if (!response.ok) {
          const errorData = await response.json().catch(() => ({}));
          throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);
        }

        const data = await response.json();
        console.log('üìù Response:', data);
        
        if (!data.success || !data.redirectUrl) {
          throw new Error(data.error || '–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
        }

        // –®–∞–≥ 2: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Supabase
        setStep('auth');
        setMessage('–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –ø–æ magic link –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        console.log('üîó Following magic link:', data.redirectUrl);
        window.location.href = data.redirectUrl;
        return; // –í—ã—Ö–æ–¥–∏–º, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–µ—Ä–µ—Ö–æ–¥

      } catch (error: any) {
        console.error('‚ùå Error processing QR token:', error);
        setStatus('error');
        setMessage(error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ QR —Ç–æ–∫–µ–Ω–∞');
        
        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
          navigate('/');
        }, 3000);
      }
    };

    processQRToken();
  }, [token, navigate]);

  const getStepIcon = () => {
    if (status === 'error') return <AlertCircle className="mx-auto mb-4 text-red-600" size={48} />;
    if (status === 'success') return <CheckCircle className="mx-auto mb-4 text-green-600" size={48} />;
    return <Loader2 className="mx-auto mb-4 animate-spin text-blue-600" size={48} />;
  };

  const getStepTitle = () => {
    if (status === 'error') return '–û—à–∏–±–∫–∞';
    if (status === 'success') return '–£—Å–ø–µ—à–Ω–æ!';
    
    switch (step) {
      case 'qr': return '–û–±—Ä–∞–±–æ—Ç–∫–∞ QR –∫–æ–¥–∞';
      case 'auth': return '–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏';
      case 'profile': return '–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è';
      default: return '–û–±—Ä–∞–±–æ—Ç–∫–∞ QR –∫–æ–¥–∞';
    }
  };

  const getProgressBar = () => {
    if (status !== 'loading') return null;
    
    const progress = step === 'qr' ? 33 : step === 'auth' ? 66 : 100;
    
    return (
      <div className="w-full bg-gray-200 rounded-full h-2 mb-4">
        <div 
          className="bg-blue-600 h-2 rounded-full transition-all duration-500 ease-out"
          style={{ width: `${progress}%` }}
        />
      </div>
    );
  };

  return (
    <div className="min-h-screen bg-gray-50 flex items-center justify-center p-4">
      <div className="bg-white rounded-lg shadow-lg p-8 max-w-md w-full text-center">
        {getStepIcon()}
        <h2 className="text-xl font-semibold text-gray-900 mb-2">
          {getStepTitle()}
        </h2>
        <p className="text-gray-600 mb-4">{message}</p>
        
        {getProgressBar()}
        
        {status === 'error' && (
          <button
            onClick={() => navigate('/')}
            className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors"
          >
            –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
          </button>
        )}
      </div>
    </div>
  );
}
