import React, { useState, useEffect } from 'react';
import { ArrowLeft, BarChart3 } from 'lucide-react';
import { supabase } from '../lib/supabase';
import { useAuth } from '../hooks/useAuth';
import { EventHeader } from './eventDetail/EventHeader';
import { EventDetailsCard } from './eventDetail/EventDetailsCard';
// @ts-ignore
import EventParticipantsList from './eventDetail/EventParticipantsList.jsx';
// @ts-ignore
import EventTestsContainer from './eventDetail/EventTestsContainer.jsx';
import { TPEvaluationSection } from './eventDetail/TPEvaluationSection';
import { FeedbackTab } from './feedback/FeedbackTab';
import { TrainerActionNotifications } from './notifications/TrainerActionNotifications';
import { useNavigate } from 'react-router-dom';



interface EventDetailViewProps {
  eventId: string;
  onStartTest?: (testId: string, eventId: string, attemptId: string) => void;
  onBack?: () => void;
}

export default function EventDetailView({ eventId, onStartTest, onBack }: EventDetailViewProps) {
  const { userProfile } = useAuth();
  const navigate = useNavigate();
  const [organizerPosition, setOrganizerPosition] = useState<string>('–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä');
  const [event, setEvent] = useState<any>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [refreshKey, setRefreshKey] = useState(0);
  const [participants, setParticipants] = useState<any[]>([]);

  useEffect(() => {
    async function fetchEvent() {
      setLoading(true);
      setError(null);
      try {
        const { data, error } = await supabase
          .from('events')
          .select(`
            *,
            creator:creator_id(
              id,
              full_name,
              email,
              phone,
              avatar_url,
              position:position_id(name),
              territory:territory_id(name),
              branch:branch_id(name)
            )
          `)
          .eq('id', eventId)
          .single();
        if (error) throw error;
        setEvent(data);
      } catch (err: any) {
        setError('–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏');
        setEvent(null);
      } finally {
        setLoading(false);
      }
    }
    fetchEvent();
  }, [eventId]);

  useEffect(() => {
    if (event?.creator?.position?.name) {
      setOrganizerPosition(event.creator.position.name);
    } else {
      setOrganizerPosition('–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä');
    }
  }, [event]);

  const organizerName = event?.creator?.full_name || '';

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
  const handleRefreshData = () => {
    try {
      console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è');
      setRefreshKey(prev => prev + 1);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
  useEffect(() => {
    async function fetchParticipants() {
      if (!eventId) return;
      
      try {
        const { data, error } = await supabase
          .from('event_participants')
          .select(`
            *,
            user:user_id(
              id,
              full_name,
              email,
              position:position_id(name),
              territory:territory_id(name)
            )
          `)
          .eq('event_id', eventId);

        if (error) throw error;
        setParticipants(data || []);
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:', err);
      }
    }

    fetchParticipants();
  }, [eventId, refreshKey]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  const handleMarkAttendance = () => {
    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —Å–µ–∫—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    const participantsSection = document.querySelector('[data-section="participants"]');
    if (participantsSection) {
      participantsSection.scrollIntoView({ behavior: 'smooth' });
    }
  };

  const handleCompleteEvent = async () => {
    if (!event || !userProfile) {
      console.error('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ');
      return;
    }
    
    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
    const confirmMessage = event.status === 'completed' 
      ? '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è?'
      : '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ?';
    
    if (!confirm(confirmMessage)) return;
    
    try {
      const newStatus = event.status === 'completed' ? 'published' : 'completed';
      
      console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å "${event.status}" –Ω–∞ "${newStatus}"`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
      const { error } = await supabase
        .from('events')
        .update({ 
          status: newStatus,
          updated_at: new Date().toISOString()
        })
        .eq('id', event.id);

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ Supabase:', error);
        throw error;
      }

      console.log('‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');

      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –ò–°–ü–†–ê–í–õ–ï–ù–û: –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º null
      setEvent(prev => {
        if (!prev) {
          console.error('‚ùå –ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
          return prev;
        }
        return { ...prev, status: newStatus };
      });
      
      console.log('‚úÖ –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ (–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
      // handleRefreshData();
      
      const successMessage = newStatus === 'completed' 
        ? '‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ'
        : '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ';
      
      console.log(successMessage);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      alert(successMessage);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:', error);
      alert('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  };

  const handleViewParticipants = () => {
    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —Å–µ–∫—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    const participantsSection = document.querySelector('[data-section="participants"]');
    if (participantsSection) {
      participantsSection.scrollIntoView({ behavior: 'smooth' });
    }
  };

  const handleStartEvent = () => {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –Ω–∞—á–∞–ª–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    console.log('–ù–∞—á–∞–ª–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è');
  };

  const handleViewTests = () => {
    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —Å–µ–∫—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤
    const testsSection = document.querySelector('[data-section="tests"]');
    if (testsSection) {
      testsSection.scrollIntoView({ behavior: 'smooth' });
    }
  };

  const handleViewFeedback = () => {
    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —Å–µ–∫—Ü–∏–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    const feedbackSection = document.querySelector('[data-section="feedback"]');
    if (feedbackSection) {
      feedbackSection.scrollIntoView({ behavior: 'smooth' });
    }
  };

  const handleViewStats = () => {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    console.log('–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è');
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
  const handleUpdateOrganizerData = (newAvatarUrl: string) => {
    if (event) {
      setEvent(prevEvent => ({
        ...prevEvent,
        creator: {
          ...prevEvent.creator,
          avatar_url: newAvatarUrl
        }
      }));
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100">
      <div className="space-y-8">
      {loading && (
        <div className="flex flex-col items-center justify-center py-20">
          <div className="w-12 h-12 border-4 border-sns-green border-t-transparent rounded-full animate-spin mb-4"></div>
          <p className="text-gray-600 text-lg font-medium">–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è...</p>
        </div>
      )}
      {error && !loading && (
        <div className="flex flex-col items-center justify-center py-20">
          <div className="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mb-4">
            <svg className="w-8 h-8 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z" />
            </svg>
          </div>
          <h3 className="text-xl font-semibold text-gray-900 mb-2">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h3>
          <p className="text-gray-600 text-center max-w-md">{error}</p>
        </div>
      )}
      {!loading && !error && !event && (
        <div className="flex flex-col items-center justify-center py-20">
          <div className="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mb-4">
            <svg className="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.172 16.172a4 4 0 015.656 0M9 12h6m-6-4h6m2 5.291A7.962 7.962 0 0112 15c-2.34 0-4.47-.881-6.08-2.33" />
            </svg>
          </div>
          <h3 className="text-xl font-semibold text-gray-900 mb-2">–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</h3>
          <p className="text-gray-600 text-center max-w-md">–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ</p>
        </div>
      )}
      {event && !loading && !error && event.id && (
        <>
          <EventHeader event={event} onBack={onBack} />
          
          {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
          <div className="space-y-4 mt-8 sm:mt-4">
            <EventDetailsCard 
              event={event} 
              isCreator={event.creator_id === userProfile?.id}
              onUpdateOrganizerData={handleUpdateOrganizerData}
              onCompleteEvent={handleCompleteEvent}
            />
            <div data-section="participants">
              <EventParticipantsList eventId={eventId} refreshKey={refreshKey} />
            </div>
            <div data-section="tests">
              <EventTestsContainer 
                eventId={eventId} 
                userProfile={userProfile} 
                isAdmin={false} 
                onStartTest={onStartTest}
                refreshKey={refreshKey}
                onRefreshData={handleRefreshData}
              />
            </div>
            <div data-section="tp-evaluation">
              <TPEvaluationSection 
                eventId={eventId} 
                userProfile={userProfile} 
              />
            </div>
            <div data-section="feedback">
              <FeedbackTab eventId={eventId} />
            </div>
          </div>

          {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–æ–≤ */}
          <TrainerActionNotifications
            event={event}
            userProfile={userProfile}
            participants={participants}
            onMarkAttendance={handleMarkAttendance}
            onViewParticipants={handleViewParticipants}
            onStartEvent={handleStartEvent}
            onCompleteEvent={handleCompleteEvent}
            onViewTests={handleViewTests}
            onViewFeedback={handleViewFeedback}
            onViewStats={handleViewStats}
          />
        </>
        )}
      </div>
    </div>
  );
}