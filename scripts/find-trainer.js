import { createClient } from '@supabase/supabase-js';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Supabase (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–∏)
const supabaseUrl = 'https://oaockmesooydvausfoca.supabase.co';
const supabaseKey = process.env.SUPABASE_ANON_KEY || 'your-anon-key';

const supabase = createClient(supabaseUrl, supabaseKey);

async function findTrainer() {
  console.log('üîç –ü–æ–∏—Å–∫ —Ç—Ä–µ–Ω–µ—Ä–∞ –ö–∞–¥–æ—á–∫–∏–Ω –ú–∞–∫—Å–∏–º...\n');

  try {
    // 1. –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏
    const { data: trainers, error: trainerError } = await supabase
      .from('users')
      .select(`
        id,
        full_name,
        email,
        phone,
        branch_id,
        role,
        subdivision,
        branch_subrole,
        status
      `)
      .or('full_name.ilike.%–ö–∞–¥–æ—á–∫–∏–Ω%,full_name.ilike.%–ú–∞–∫—Å–∏–º%–ö–∞–¥–æ—á–∫–∏–Ω%,email.ilike.%–∫–∞–¥–æ—á–∫–∏–Ω%')
      .eq('role', 'trainer');

    if (trainerError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç—Ä–µ–Ω–µ—Ä–æ–≤:', trainerError);
      return;
    }

    console.log('üë• –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–µ—Ä—ã:');
    console.log(JSON.stringify(trainers, null, 2));

    // 2. –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ç—Ä–µ–Ω–µ—Ä–∞, –ø–æ–ª—É—á–∏–º –µ–≥–æ —Ñ–∏–ª–∏–∞–ª
    if (trainers && trainers.length > 0) {
      for (const trainer of trainers) {
        if (trainer.branch_id) {
          const { data: branch, error: branchError } = await supabase
            .from('branches')
            .select('id, name, code, address')
            .eq('id', trainer.branch_id)
            .single();

          if (branchError) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∏–ª–∏–∞–ª–∞ –¥–ª—è ${trainer.full_name}:`, branchError);
          } else {
            console.log(`\nüè¢ –§–∏–ª–∏–∞–ª —Ç—Ä–µ–Ω–µ—Ä–∞ ${trainer.full_name}:`);
            console.log(JSON.stringify(branch, null, 2));
          }
        } else {
          console.log(`\n‚ö†Ô∏è –£ —Ç—Ä–µ–Ω–µ—Ä–∞ ${trainer.full_name} –Ω–µ —É–∫–∞–∑–∞–Ω —Ñ–∏–ª–∏–∞–ª –±–∞–∑–∏—Ä–æ–≤–∞–Ω–∏—è`);
        }
      }
    } else {
      console.log('‚ùå –¢—Ä–µ–Ω–µ—Ä –ö–∞–¥–æ—á–∫–∏–Ω –ú–∞–∫—Å–∏–º –Ω–µ –Ω–∞–π–¥–µ–Ω');
      
      // 3. –ü–æ–∫–∞–∂–µ–º –≤—Å–µ—Ö —Ç—Ä–µ–Ω–µ—Ä–æ–≤
      const { data: allTrainers, error: allTrainersError } = await supabase
        .from('users')
        .select('id, full_name, email, branch_id')
        .eq('role', 'trainer')
        .order('full_name');

      if (allTrainersError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Ç—Ä–µ–Ω–µ—Ä–æ–≤:', allTrainersError);
      } else {
        console.log('\nüë• –í—Å–µ —Ç—Ä–µ–Ω–µ—Ä—ã –≤ —Å–∏—Å—Ç–µ–º–µ:');
        allTrainers.forEach(t => {
          console.log(`- ${t.full_name} (${t.email}) - —Ñ–∏–ª–∏–∞–ª: ${t.branch_id || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
        });
      }
    }

    // 4. –ü–æ–∫–∞–∂–µ–º –≤—Å–µ —Ñ–∏–ª–∏–∞–ª—ã
    const { data: branches, error: branchesError } = await supabase
      .from('branches')
      .select('id, name, code, address')
      .order('name');

    if (branchesError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∏–ª–∏–∞–ª–æ–≤:', branchesError);
    } else {
      console.log('\nüè¢ –í—Å–µ —Ñ–∏–ª–∏–∞–ª—ã –≤ —Å–∏—Å—Ç–µ–º–µ:');
      branches.forEach(b => {
        console.log(`- ${b.name} (${b.code || '–±–µ–∑ –∫–æ–¥–∞'}) - ID: ${b.id}`);
      });
    }

  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

findTrainer();
