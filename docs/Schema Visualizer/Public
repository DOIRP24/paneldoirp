-- WARNING: This schema is for context only and is not meant to be run.
-- Table order and constraints may not be valid for execution.

CREATE TABLE public.admin_logs (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  admin_id uuid,
  action text NOT NULL,
  resource_type text,
  resource_id uuid,
  old_values jsonb,
  new_values jsonb,
  ip_address inet,
  user_agent text,
  success boolean DEFAULT true,
  error_message text,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT admin_logs_pkey PRIMARY KEY (id),
  CONSTRAINT admin_logs_admin_id_fkey FOREIGN KEY (admin_id) REFERENCES public.users(id)
);
CREATE TABLE public.auth_identities_backup (
  provider_id text,
  user_id uuid,
  identity_data jsonb,
  provider text,
  last_sign_in_at timestamp with time zone,
  created_at timestamp with time zone,
  updated_at timestamp with time zone,
  email text,
  id uuid
);
CREATE TABLE public.auth_users_backup (
  instance_id uuid,
  id uuid,
  aud character varying,
  role character varying,
  email character varying,
  encrypted_password character varying,
  email_confirmed_at timestamp with time zone,
  invited_at timestamp with time zone,
  confirmation_token character varying,
  confirmation_sent_at timestamp with time zone,
  recovery_token character varying,
  recovery_sent_at timestamp with time zone,
  email_change_token_new character varying,
  email_change character varying,
  email_change_sent_at timestamp with time zone,
  last_sign_in_at timestamp with time zone,
  raw_app_meta_data jsonb,
  raw_user_meta_data jsonb,
  is_super_admin boolean,
  created_at timestamp with time zone,
  updated_at timestamp with time zone,
  phone text,
  phone_confirmed_at timestamp with time zone,
  phone_change text,
  phone_change_token character varying,
  phone_change_sent_at timestamp with time zone,
  confirmed_at timestamp with time zone,
  email_change_token_current character varying,
  email_change_confirm_status smallint,
  banned_until timestamp with time zone,
  reauthentication_token character varying,
  reauthentication_sent_at timestamp with time zone,
  is_sso_user boolean,
  deleted_at timestamp with time zone,
  is_anonymous boolean
);
CREATE TABLE public.branches (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name text NOT NULL,
  code text UNIQUE,
  address text,
  coordinates jsonb,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT branches_pkey PRIMARY KEY (id)
);
CREATE TABLE public.event_participants (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  event_id uuid NOT NULL,
  user_id uuid NOT NULL,
  attended boolean DEFAULT false,
  entry_test_score integer,
  final_test_score integer,
  feedback_score integer,
  competency_scores jsonb,
  notes text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  feedback_submitted boolean DEFAULT false,
  CONSTRAINT event_participants_pkey PRIMARY KEY (id),
  CONSTRAINT event_participants_event_id_fkey FOREIGN KEY (event_id) REFERENCES public.events(id),
  CONSTRAINT event_participants_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id)
);
CREATE TABLE public.event_types (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name text NOT NULL UNIQUE,
  name_ru text NOT NULL,
  description text,
  is_online boolean DEFAULT false,
  requires_location boolean DEFAULT false,
  has_entry_test boolean DEFAULT false,
  has_final_test boolean DEFAULT false,
  has_feedback_form boolean DEFAULT false,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT event_types_pkey PRIMARY KEY (id)
);
CREATE TABLE public.events (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  title text NOT NULL,
  description text,
  event_type_id uuid NOT NULL,
  creator_id uuid NOT NULL,
  start_date timestamp with time zone NOT NULL,
  end_date timestamp with time zone,
  location text,
  location_coordinates jsonb,
  meeting_link text,
  points integer DEFAULT 0,
  status USER-DEFINED DEFAULT 'draft'::event_status_enum,
  max_participants integer,
  files jsonb DEFAULT '[]'::jsonb,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT events_pkey PRIMARY KEY (id),
  CONSTRAINT events_event_type_id_fkey FOREIGN KEY (event_type_id) REFERENCES public.event_types(id),
  CONSTRAINT events_creator_id_fkey FOREIGN KEY (creator_id) REFERENCES public.users(id)
);
CREATE TABLE public.feedback_answers (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  submission_id uuid,
  question_id uuid,
  rating_value integer,
  text_value text,
  options_value jsonb,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT feedback_answers_pkey PRIMARY KEY (id),
  CONSTRAINT feedback_answers_submission_id_fkey FOREIGN KEY (submission_id) REFERENCES public.feedback_submissions(id),
  CONSTRAINT feedback_answers_question_id_fkey FOREIGN KEY (question_id) REFERENCES public.feedback_questions(id)
);
CREATE TABLE public.feedback_questions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  template_id uuid,
  question text NOT NULL,
  question_type text NOT NULL DEFAULT 'rating'::text,
  required boolean DEFAULT true,
  order_num integer NOT NULL,
  options jsonb DEFAULT '[]'::jsonb,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT feedback_questions_pkey PRIMARY KEY (id),
  CONSTRAINT feedback_questions_template_id_fkey FOREIGN KEY (template_id) REFERENCES public.feedback_templates(id)
);
CREATE TABLE public.feedback_submissions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  event_id uuid,
  template_id uuid,
  overall_rating integer,
  comments text,
  is_anonymous boolean DEFAULT false,
  submitted_at timestamp with time zone DEFAULT now(),
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT feedback_submissions_pkey PRIMARY KEY (id),
  CONSTRAINT feedback_submissions_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id),
  CONSTRAINT feedback_submissions_event_id_fkey FOREIGN KEY (event_id) REFERENCES public.events(id),
  CONSTRAINT feedback_submissions_template_id_fkey FOREIGN KEY (template_id) REFERENCES public.feedback_templates(id)
);
CREATE TABLE public.feedback_templates (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name text NOT NULL,
  description text,
  event_type_id uuid,
  is_default boolean DEFAULT false,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  metadata jsonb DEFAULT '{}'::jsonb,
  CONSTRAINT feedback_templates_pkey PRIMARY KEY (id),
  CONSTRAINT feedback_templates_event_type_id_fkey FOREIGN KEY (event_type_id) REFERENCES public.event_types(id)
);
CREATE TABLE public.notification_tasks (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  assigned_to uuid,
  title text NOT NULL,
  description text,
  type text NOT NULL DEFAULT 'general'::text,
  priority text NOT NULL DEFAULT 'medium'::text CHECK (priority = ANY (ARRAY['low'::text, 'medium'::text, 'high'::text, 'urgent'::text])),
  status text NOT NULL DEFAULT 'pending'::text CHECK (status = ANY (ARRAY['pending'::text, 'in_progress'::text, 'completed'::text, 'cancelled'::text])),
  due_date timestamp with time zone,
  completed_at timestamp with time zone,
  metadata jsonb DEFAULT '{}'::jsonb,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT notification_tasks_pkey PRIMARY KEY (id),
  CONSTRAINT notification_tasks_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id),
  CONSTRAINT notification_tasks_assigned_to_fkey FOREIGN KEY (assigned_to) REFERENCES public.users(id)
);
CREATE TABLE public.positions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name text NOT NULL,
  description text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  is_active boolean DEFAULT true,
  level integer DEFAULT 1,
  department text,
  permissions jsonb DEFAULT '[]'::jsonb,
  CONSTRAINT positions_pkey PRIMARY KEY (id)
);
CREATE TABLE public.system_settings (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  key text NOT NULL UNIQUE,
  value jsonb,
  description text,
  category text DEFAULT 'general'::text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT system_settings_pkey PRIMARY KEY (id)
);
CREATE TABLE public.territories (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name text NOT NULL,
  region text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  is_active boolean DEFAULT true,
  manager_id uuid,
  metadata jsonb DEFAULT '{}'::jsonb,
  CONSTRAINT territories_pkey PRIMARY KEY (id),
  CONSTRAINT territories_manager_id_fkey FOREIGN KEY (manager_id) REFERENCES public.users(id)
);
CREATE TABLE public.test_answers (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  question_id uuid NOT NULL,
  text text NOT NULL,
  is_correct boolean NOT NULL DEFAULT false,
  order integer NOT NULL DEFAULT 0,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT test_answers_pkey PRIMARY KEY (id),
  CONSTRAINT test_answers_question_id_fkey FOREIGN KEY (question_id) REFERENCES public.test_questions(id)
);
CREATE TABLE public.test_questions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  test_id uuid NOT NULL,
  question text NOT NULL,
  question_type text NOT NULL DEFAULT 'single_choice'::text CHECK (question_type = ANY (ARRAY['single_choice'::text, 'multiple_choice'::text, 'text'::text, 'sequence'::text])),
  order integer NOT NULL DEFAULT 0,
  points integer NOT NULL DEFAULT 1,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  correct_order ARRAY,
  CONSTRAINT test_questions_pkey PRIMARY KEY (id),
  CONSTRAINT test_questions_test_id_fkey FOREIGN KEY (test_id) REFERENCES public.tests(id)
);
CREATE TABLE public.test_sequence_answers (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  question_id uuid,
  answer_order integer NOT NULL,
  answer_text text NOT NULL,
  CONSTRAINT test_sequence_answers_pkey PRIMARY KEY (id),
  CONSTRAINT test_sequence_answers_question_id_fkey FOREIGN KEY (question_id) REFERENCES public.test_questions(id)
);
CREATE TABLE public.tests (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  title text NOT NULL,
  description text,
  type text NOT NULL CHECK (type = ANY (ARRAY['entry'::text, 'final'::text, 'annual'::text])),
  passing_score integer DEFAULT 70,
  time_limit integer DEFAULT 30,
  event_type_id uuid,
  status text NOT NULL DEFAULT 'draft'::text CHECK (status = ANY (ARRAY['draft'::text, 'active'::text, 'inactive'::text])),
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT tests_pkey PRIMARY KEY (id),
  CONSTRAINT tests_event_type_id_fkey FOREIGN KEY (event_type_id) REFERENCES public.event_types(id)
);
CREATE TABLE public.user_activity_logs (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  action text NOT NULL,
  resource_type text,
  resource_id uuid,
  old_values jsonb,
  new_values jsonb,
  created_at timestamp with time zone DEFAULT now(),
  session_id text,
  ip_address inet,
  user_agent text,
  CONSTRAINT user_activity_logs_pkey PRIMARY KEY (id),
  CONSTRAINT user_activity_logs_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id)
);
CREATE TABLE public.user_feedback (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  event_id uuid NOT NULL,
  overall_rating integer,
  comments text,
  is_anonymous boolean DEFAULT false,
  submitted_at timestamp with time zone DEFAULT now(),
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT user_feedback_pkey PRIMARY KEY (id)
);
CREATE TABLE public.user_logs (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  action text NOT NULL,
  resource_type text,
  resource_id uuid,
  details jsonb,
  ip_address inet,
  user_agent text,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT user_logs_pkey PRIMARY KEY (id),
  CONSTRAINT user_logs_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id)
);
CREATE TABLE public.user_test_answers (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  attempt_id uuid NOT NULL,
  question_id uuid NOT NULL,
  answer_id uuid,
  text_answer text,
  is_correct boolean,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  answer_time_seconds integer,
  user_order ARRAY,
  CONSTRAINT user_test_answers_pkey PRIMARY KEY (id),
  CONSTRAINT user_test_answers_attempt_id_fkey FOREIGN KEY (attempt_id) REFERENCES public.user_test_attempts(id),
  CONSTRAINT user_test_answers_question_id_fkey FOREIGN KEY (question_id) REFERENCES public.test_questions(id),
  CONSTRAINT user_test_answers_answer_id_fkey FOREIGN KEY (answer_id) REFERENCES public.test_answers(id)
);
CREATE TABLE public.user_test_attempts (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  test_id uuid NOT NULL,
  event_id uuid NOT NULL,
  start_time timestamp with time zone DEFAULT now(),
  end_time timestamp with time zone,
  score integer,
  status text NOT NULL DEFAULT 'in_progress'::text CHECK (status = ANY (ARRAY['in_progress'::text, 'completed'::text, 'failed'::text])),
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT user_test_attempts_pkey PRIMARY KEY (id),
  CONSTRAINT user_test_attempts_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id),
  CONSTRAINT user_test_attempts_test_id_fkey FOREIGN KEY (test_id) REFERENCES public.tests(id),
  CONSTRAINT user_test_attempts_event_id_fkey FOREIGN KEY (event_id) REFERENCES public.events(id)
);
CREATE TABLE public.users (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  email text UNIQUE,
  sap_number text UNIQUE CHECK (sap_number IS NULL OR TRIM(BOTH FROM sap_number) <> ''::text),
  full_name text NOT NULL,
  position text,
  phone text,
  avatar_url text,
  role USER-DEFINED NOT NULL DEFAULT 'employee'::user_role_enum,
  subdivision USER-DEFINED NOT NULL DEFAULT 'management_company'::subdivision_enum,
  branch_subrole USER-DEFINED,
  branch_id uuid,
  status USER-DEFINED DEFAULT 'active'::user_status_enum,
  work_experience_days integer DEFAULT 0,
  last_sign_in_at timestamp with time zone,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  is_active boolean DEFAULT true,
  department text DEFAULT 'management_company'::text,
  is_leaving boolean DEFAULT false,
  position_id uuid,
  territory_id uuid,
  last_activity_at timestamp with time zone,
  password_changed_at timestamp with time zone,
  failed_login_attempts integer DEFAULT 0,
  locked_until timestamp with time zone,
  preferences jsonb DEFAULT '{}'::jsonb,
  notes text,
  CONSTRAINT users_pkey PRIMARY KEY (id),
  CONSTRAINT users_branch_id_fkey FOREIGN KEY (branch_id) REFERENCES public.branches(id),
  CONSTRAINT users_position_id_fkey FOREIGN KEY (position_id) REFERENCES public.positions(id),
  CONSTRAINT users_territory_id_fkey FOREIGN KEY (territory_id) REFERENCES public.territories(id)
);
CREATE TABLE public.users_backup (
  id uuid,
  email text,
  sap_number text,
  full_name text,
  position text,
  phone text,
  avatar_url text,
  role USER-DEFINED,
  subdivision USER-DEFINED,
  branch_subrole USER-DEFINED,
  branch_id uuid,
  status USER-DEFINED,
  work_experience_days integer,
  last_sign_in_at timestamp with time zone,
  created_at timestamp with time zone,
  updated_at timestamp with time zone,
  is_active boolean,
  department text,
  is_leaving boolean,
  position_id uuid,
  territory_id uuid,
  last_activity_at timestamp with time zone,
  password_changed_at timestamp with time zone,
  failed_login_attempts integer,
  locked_until timestamp with time zone,
  preferences jsonb,
  notes text
);-- WARNING: This schema is for context only and is not meant to be run.
-- Table order and constraints may not be valid for execution.

CREATE TABLE public.admin_logs (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  admin_id uuid,
  action text NOT NULL,
  resource_type text,
  resource_id uuid,
  old_values jsonb,
  new_values jsonb,
  ip_address inet,
  user_agent text,
  success boolean DEFAULT true,
  error_message text,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT admin_logs_pkey PRIMARY KEY (id),
  CONSTRAINT admin_logs_admin_id_fkey FOREIGN KEY (admin_id) REFERENCES public.users(id)
);
CREATE TABLE public.auth_identities_backup (
  provider_id text,
  user_id uuid,
  identity_data jsonb,
  provider text,
  last_sign_in_at timestamp with time zone,
  created_at timestamp with time zone,
  updated_at timestamp with time zone,
  email text,
  id uuid
);
CREATE TABLE public.auth_users_backup (
  instance_id uuid,
  id uuid,
  aud character varying,
  role character varying,
  email character varying,
  encrypted_password character varying,
  email_confirmed_at timestamp with time zone,
  invited_at timestamp with time zone,
  confirmation_token character varying,
  confirmation_sent_at timestamp with time zone,
  recovery_token character varying,
  recovery_sent_at timestamp with time zone,
  email_change_token_new character varying,
  email_change character varying,
  email_change_sent_at timestamp with time zone,
  last_sign_in_at timestamp with time zone,
  raw_app_meta_data jsonb,
  raw_user_meta_data jsonb,
  is_super_admin boolean,
  created_at timestamp with time zone,
  updated_at timestamp with time zone,
  phone text,
  phone_confirmed_at timestamp with time zone,
  phone_change text,
  phone_change_token character varying,
  phone_change_sent_at timestamp with time zone,
  confirmed_at timestamp with time zone,
  email_change_token_current character varying,
  email_change_confirm_status smallint,
  banned_until timestamp with time zone,
  reauthentication_token character varying,
  reauthentication_sent_at timestamp with time zone,
  is_sso_user boolean,
  deleted_at timestamp with time zone,
  is_anonymous boolean
);
CREATE TABLE public.branches (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name text NOT NULL,
  code text UNIQUE,
  address text,
  coordinates jsonb,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT branches_pkey PRIMARY KEY (id)
);
CREATE TABLE public.event_participants (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  event_id uuid NOT NULL,
  user_id uuid NOT NULL,
  attended boolean DEFAULT false,
  entry_test_score integer,
  final_test_score integer,
  feedback_score integer,
  competency_scores jsonb,
  notes text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  feedback_submitted boolean DEFAULT false,
  CONSTRAINT event_participants_pkey PRIMARY KEY (id),
  CONSTRAINT event_participants_event_id_fkey FOREIGN KEY (event_id) REFERENCES public.events(id),
  CONSTRAINT event_participants_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id)
);
CREATE TABLE public.event_types (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name text NOT NULL UNIQUE,
  name_ru text NOT NULL,
  description text,
  is_online boolean DEFAULT false,
  requires_location boolean DEFAULT false,
  has_entry_test boolean DEFAULT false,
  has_final_test boolean DEFAULT false,
  has_feedback_form boolean DEFAULT false,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT event_types_pkey PRIMARY KEY (id)
);
CREATE TABLE public.events (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  title text NOT NULL,
  description text,
  event_type_id uuid NOT NULL,
  creator_id uuid NOT NULL,
  start_date timestamp with time zone NOT NULL,
  end_date timestamp with time zone,
  location text,
  location_coordinates jsonb,
  meeting_link text,
  points integer DEFAULT 0,
  status USER-DEFINED DEFAULT 'draft'::event_status_enum,
  max_participants integer,
  files jsonb DEFAULT '[]'::jsonb,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT events_pkey PRIMARY KEY (id),
  CONSTRAINT events_event_type_id_fkey FOREIGN KEY (event_type_id) REFERENCES public.event_types(id),
  CONSTRAINT events_creator_id_fkey FOREIGN KEY (creator_id) REFERENCES public.users(id)
);
CREATE TABLE public.feedback_answers (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  submission_id uuid,
  question_id uuid,
  rating_value integer,
  text_value text,
  options_value jsonb,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT feedback_answers_pkey PRIMARY KEY (id),
  CONSTRAINT feedback_answers_submission_id_fkey FOREIGN KEY (submission_id) REFERENCES public.feedback_submissions(id),
  CONSTRAINT feedback_answers_question_id_fkey FOREIGN KEY (question_id) REFERENCES public.feedback_questions(id)
);
CREATE TABLE public.feedback_questions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  template_id uuid,
  question text NOT NULL,
  question_type text NOT NULL DEFAULT 'rating'::text,
  required boolean DEFAULT true,
  order_num integer NOT NULL,
  options jsonb DEFAULT '[]'::jsonb,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT feedback_questions_pkey PRIMARY KEY (id),
  CONSTRAINT feedback_questions_template_id_fkey FOREIGN KEY (template_id) REFERENCES public.feedback_templates(id)
);
CREATE TABLE public.feedback_submissions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  event_id uuid,
  template_id uuid,
  overall_rating integer,
  comments text,
  is_anonymous boolean DEFAULT false,
  submitted_at timestamp with time zone DEFAULT now(),
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT feedback_submissions_pkey PRIMARY KEY (id),
  CONSTRAINT feedback_submissions_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id),
  CONSTRAINT feedback_submissions_event_id_fkey FOREIGN KEY (event_id) REFERENCES public.events(id),
  CONSTRAINT feedback_submissions_template_id_fkey FOREIGN KEY (template_id) REFERENCES public.feedback_templates(id)
);
CREATE TABLE public.feedback_templates (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name text NOT NULL,
  description text,
  event_type_id uuid,
  is_default boolean DEFAULT false,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  metadata jsonb DEFAULT '{}'::jsonb,
  CONSTRAINT feedback_templates_pkey PRIMARY KEY (id),
  CONSTRAINT feedback_templates_event_type_id_fkey FOREIGN KEY (event_type_id) REFERENCES public.event_types(id)
);
CREATE TABLE public.notification_tasks (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  assigned_to uuid,
  title text NOT NULL,
  description text,
  type text NOT NULL DEFAULT 'general'::text,
  priority text NOT NULL DEFAULT 'medium'::text CHECK (priority = ANY (ARRAY['low'::text, 'medium'::text, 'high'::text, 'urgent'::text])),
  status text NOT NULL DEFAULT 'pending'::text CHECK (status = ANY (ARRAY['pending'::text, 'in_progress'::text, 'completed'::text, 'cancelled'::text])),
  due_date timestamp with time zone,
  completed_at timestamp with time zone,
  metadata jsonb DEFAULT '{}'::jsonb,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT notification_tasks_pkey PRIMARY KEY (id),
  CONSTRAINT notification_tasks_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id),
  CONSTRAINT notification_tasks_assigned_to_fkey FOREIGN KEY (assigned_to) REFERENCES public.users(id)
);
CREATE TABLE public.positions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name text NOT NULL,
  description text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  is_active boolean DEFAULT true,
  level integer DEFAULT 1,
  department text,
  permissions jsonb DEFAULT '[]'::jsonb,
  CONSTRAINT positions_pkey PRIMARY KEY (id)
);
CREATE TABLE public.system_settings (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  key text NOT NULL UNIQUE,
  value jsonb,
  description text,
  category text DEFAULT 'general'::text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT system_settings_pkey PRIMARY KEY (id)
);
CREATE TABLE public.territories (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name text NOT NULL,
  region text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  is_active boolean DEFAULT true,
  manager_id uuid,
  metadata jsonb DEFAULT '{}'::jsonb,
  CONSTRAINT territories_pkey PRIMARY KEY (id),
  CONSTRAINT territories_manager_id_fkey FOREIGN KEY (manager_id) REFERENCES public.users(id)
);
CREATE TABLE public.test_answers (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  question_id uuid NOT NULL,
  text text NOT NULL,
  is_correct boolean NOT NULL DEFAULT false,
  order integer NOT NULL DEFAULT 0,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT test_answers_pkey PRIMARY KEY (id),
  CONSTRAINT test_answers_question_id_fkey FOREIGN KEY (question_id) REFERENCES public.test_questions(id)
);
CREATE TABLE public.test_questions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  test_id uuid NOT NULL,
  question text NOT NULL,
  question_type text NOT NULL DEFAULT 'single_choice'::text CHECK (question_type = ANY (ARRAY['single_choice'::text, 'multiple_choice'::text, 'text'::text, 'sequence'::text])),
  order integer NOT NULL DEFAULT 0,
  points integer NOT NULL DEFAULT 1,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  correct_order ARRAY,
  CONSTRAINT test_questions_pkey PRIMARY KEY (id),
  CONSTRAINT test_questions_test_id_fkey FOREIGN KEY (test_id) REFERENCES public.tests(id)
);
CREATE TABLE public.test_sequence_answers (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  question_id uuid,
  answer_order integer NOT NULL,
  answer_text text NOT NULL,
  CONSTRAINT test_sequence_answers_pkey PRIMARY KEY (id),
  CONSTRAINT test_sequence_answers_question_id_fkey FOREIGN KEY (question_id) REFERENCES public.test_questions(id)
);
CREATE TABLE public.tests (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  title text NOT NULL,
  description text,
  type text NOT NULL CHECK (type = ANY (ARRAY['entry'::text, 'final'::text, 'annual'::text])),
  passing_score integer DEFAULT 70,
  time_limit integer DEFAULT 30,
  event_type_id uuid,
  status text NOT NULL DEFAULT 'draft'::text CHECK (status = ANY (ARRAY['draft'::text, 'active'::text, 'inactive'::text])),
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT tests_pkey PRIMARY KEY (id),
  CONSTRAINT tests_event_type_id_fkey FOREIGN KEY (event_type_id) REFERENCES public.event_types(id)
);
CREATE TABLE public.user_activity_logs (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  action text NOT NULL,
  resource_type text,
  resource_id uuid,
  old_values jsonb,
  new_values jsonb,
  created_at timestamp with time zone DEFAULT now(),
  session_id text,
  ip_address inet,
  user_agent text,
  CONSTRAINT user_activity_logs_pkey PRIMARY KEY (id),
  CONSTRAINT user_activity_logs_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id)
);
CREATE TABLE public.user_feedback (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  event_id uuid NOT NULL,
  overall_rating integer,
  comments text,
  is_anonymous boolean DEFAULT false,
  submitted_at timestamp with time zone DEFAULT now(),
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT user_feedback_pkey PRIMARY KEY (id)
);
CREATE TABLE public.user_logs (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  action text NOT NULL,
  resource_type text,
  resource_id uuid,
  details jsonb,
  ip_address inet,
  user_agent text,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT user_logs_pkey PRIMARY KEY (id),
  CONSTRAINT user_logs_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id)
);
CREATE TABLE public.user_test_answers (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  attempt_id uuid NOT NULL,
  question_id uuid NOT NULL,
  answer_id uuid,
  text_answer text,
  is_correct boolean,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  answer_time_seconds integer,
  user_order ARRAY,
  CONSTRAINT user_test_answers_pkey PRIMARY KEY (id),
  CONSTRAINT user_test_answers_attempt_id_fkey FOREIGN KEY (attempt_id) REFERENCES public.user_test_attempts(id),
  CONSTRAINT user_test_answers_question_id_fkey FOREIGN KEY (question_id) REFERENCES public.test_questions(id),
  CONSTRAINT user_test_answers_answer_id_fkey FOREIGN KEY (answer_id) REFERENCES public.test_answers(id)
);
CREATE TABLE public.user_test_attempts (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  test_id uuid NOT NULL,
  event_id uuid NOT NULL,
  start_time timestamp with time zone DEFAULT now(),
  end_time timestamp with time zone,
  score integer,
  status text NOT NULL DEFAULT 'in_progress'::text CHECK (status = ANY (ARRAY['in_progress'::text, 'completed'::text, 'failed'::text])),
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT user_test_attempts_pkey PRIMARY KEY (id),
  CONSTRAINT user_test_attempts_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id),
  CONSTRAINT user_test_attempts_test_id_fkey FOREIGN KEY (test_id) REFERENCES public.tests(id),
  CONSTRAINT user_test_attempts_event_id_fkey FOREIGN KEY (event_id) REFERENCES public.events(id)
);
CREATE TABLE public.users (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  email text UNIQUE,
  sap_number text UNIQUE CHECK (sap_number IS NULL OR TRIM(BOTH FROM sap_number) <> ''::text),
  full_name text NOT NULL,
  position text,
  phone text,
  avatar_url text,
  role USER-DEFINED NOT NULL DEFAULT 'employee'::user_role_enum,
  subdivision USER-DEFINED NOT NULL DEFAULT 'management_company'::subdivision_enum,
  branch_subrole USER-DEFINED,
  branch_id uuid,
  status USER-DEFINED DEFAULT 'active'::user_status_enum,
  work_experience_days integer DEFAULT 0,
  last_sign_in_at timestamp with time zone,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  is_active boolean DEFAULT true,
  department text DEFAULT 'management_company'::text,
  is_leaving boolean DEFAULT false,
  position_id uuid,
  territory_id uuid,
  last_activity_at timestamp with time zone,
  password_changed_at timestamp with time zone,
  failed_login_attempts integer DEFAULT 0,
  locked_until timestamp with time zone,
  preferences jsonb DEFAULT '{}'::jsonb,
  notes text,
  CONSTRAINT users_pkey PRIMARY KEY (id),
  CONSTRAINT users_branch_id_fkey FOREIGN KEY (branch_id) REFERENCES public.branches(id),
  CONSTRAINT users_position_id_fkey FOREIGN KEY (position_id) REFERENCES public.positions(id),
  CONSTRAINT users_territory_id_fkey FOREIGN KEY (territory_id) REFERENCES public.territories(id)
);
CREATE TABLE public.users_backup (
  id uuid,
  email text,
  sap_number text,
  full_name text,
  position text,
  phone text,
  avatar_url text,
  role USER-DEFINED,
  subdivision USER-DEFINED,
  branch_subrole USER-DEFINED,
  branch_id uuid,
  status USER-DEFINED,
  work_experience_days integer,
  last_sign_in_at timestamp with time zone,
  created_at timestamp with time zone,
  updated_at timestamp with time zone,
  is_active boolean,
  department text,
  is_leaving boolean,
  position_id uuid,
  territory_id uuid,
  last_activity_at timestamp with time zone,
  password_changed_at timestamp with time zone,
  failed_login_attempts integer,
  locked_until timestamp with time zone,
  preferences jsonb,
  notes text
);